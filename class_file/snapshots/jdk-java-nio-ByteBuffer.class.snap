---
source: class_file/src/lib.rs
expression: display
---
public abstract class java.nio.ByteBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.ByteBuffer>
  minor version: 0
  major version: 68
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #8                       //java/nio/ByteBuffer
  super_class: #2                      //java/nio/Buffer
  interfaces: 1, fields: 7, methods: 94, attributes: 3
Constant pool:
    #1 = Methodref          #2.#3            // java/nio/Buffer."<init>":(IIIILjava/lang/foreign/MemorySegment;)V
    #2 = Class              #4               // java/nio/Buffer
    #3 = NameAndType        #5:#6            // "<init>":(IIIILjava/lang/foreign/MemorySegment;)V
    #4 = Utf8               java/nio/Buffer
    #5 = Utf8               <init>
    #6 = Utf8               (IIIILjava/lang/foreign/MemorySegment;)V
    #7 = Fieldref           #8.#9            // java/nio/ByteBuffer.bigEndian:Z
    #8 = Class              #10              // java/nio/ByteBuffer
    #9 = NameAndType        #11:#12          // bigEndian:Z
   #10 = Utf8               java/nio/ByteBuffer
   #11 = Utf8               bigEndian
   #12 = Utf8               Z
   #13 = Methodref          #14.#15          // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
   #14 = Class              #16              // java/nio/ByteOrder
   #15 = NameAndType        #17:#18          // nativeOrder:()Ljava/nio/ByteOrder;
   #16 = Utf8               java/nio/ByteOrder
   #17 = Utf8               nativeOrder
   #18 = Utf8               ()Ljava/nio/ByteOrder;
   #19 = Fieldref           #14.#20          // java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
   #20 = NameAndType        #21:#22          // BIG_ENDIAN:Ljava/nio/ByteOrder;
   #21 = Utf8               BIG_ENDIAN
   #22 = Utf8               Ljava/nio/ByteOrder;
   #23 = Fieldref           #8.#24           // java/nio/ByteBuffer.nativeByteOrder:Z
   #24 = NameAndType        #25:#12          // nativeByteOrder:Z
   #25 = Utf8               nativeByteOrder
   #26 = Fieldref           #8.#27           // java/nio/ByteBuffer.hb:[B
   #27 = NameAndType        #28:#29          // hb:[B
   #28 = Utf8               hb
   #29 = Utf8               [B
   #30 = Fieldref           #8.#31           // java/nio/ByteBuffer.offset:I
   #31 = NameAndType        #32:#33          // offset:I
   #32 = Utf8               offset
   #33 = Utf8               I
   #34 = Methodref          #8.#35           // java/nio/ByteBuffer."<init>":(IIII[BILjava/lang/foreign/MemorySegment;)V
   #35 = NameAndType        #5:#36           // "<init>":(IIII[BILjava/lang/foreign/MemorySegment;)V
   #36 = Utf8               (IIII[BILjava/lang/foreign/MemorySegment;)V
   #37 = Methodref          #2.#38           // java/nio/Buffer."<init>":(JILjava/lang/foreign/MemorySegment;)V
   #38 = NameAndType        #5:#39           // "<init>":(JILjava/lang/foreign/MemorySegment;)V
   #39 = Utf8               (JILjava/lang/foreign/MemorySegment;)V
   #40 = Class              #41              // java/nio/DirectByteBuffer
   #41 = Utf8               java/nio/DirectByteBuffer
   #42 = Methodref          #40.#43          // java/nio/DirectByteBuffer."<init>":(I)V
   #43 = NameAndType        #5:#44           // "<init>":(I)V
   #44 = Utf8               (I)V
   #45 = Methodref          #8.#46           // java/nio/ByteBuffer.createCapacityException:(I)Ljava/lang/IllegalArgumentException;
   #46 = NameAndType        #47:#48          // createCapacityException:(I)Ljava/lang/IllegalArgumentException;
   #47 = Utf8               createCapacityException
   #48 = Utf8               (I)Ljava/lang/IllegalArgumentException;
   #49 = Class              #50              // java/nio/HeapByteBuffer
   #50 = Utf8               java/nio/HeapByteBuffer
   #51 = Methodref          #49.#52          // java/nio/HeapByteBuffer."<init>":(IILjava/lang/foreign/MemorySegment;)V
   #52 = NameAndType        #5:#53           // "<init>":(IILjava/lang/foreign/MemorySegment;)V
   #53 = Utf8               (IILjava/lang/foreign/MemorySegment;)V
   #54 = Methodref          #49.#55          // java/nio/HeapByteBuffer."<init>":([BIILjava/lang/foreign/MemorySegment;)V
   #55 = NameAndType        #5:#56           // "<init>":([BIILjava/lang/foreign/MemorySegment;)V
   #56 = Utf8               ([BIILjava/lang/foreign/MemorySegment;)V
   #57 = Class              #58              // java/lang/IllegalArgumentException
   #58 = Utf8               java/lang/IllegalArgumentException
   #59 = Class              #60              // java/lang/IndexOutOfBoundsException
   #60 = Utf8               java/lang/IndexOutOfBoundsException
   #61 = Methodref          #59.#62          // java/lang/IndexOutOfBoundsException."<init>":()V
   #62 = NameAndType        #5:#63           // "<init>":()V
   #63 = Utf8               ()V
   #64 = Methodref          #8.#65           // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
   #65 = NameAndType        #66:#67          // wrap:([BII)Ljava/nio/ByteBuffer;
   #66 = Utf8               wrap
   #67 = Utf8               ([BII)Ljava/nio/ByteBuffer;
   #68 = Methodref          #69.#70          // java/util/Objects.checkFromIndexSize:(III)I
   #69 = Class              #71              // java/util/Objects
   #70 = NameAndType        #72:#73          // checkFromIndexSize:(III)I
   #71 = Utf8               java/util/Objects
   #72 = Utf8               checkFromIndexSize
   #73 = Utf8               (III)I
   #74 = Methodref          #8.#75           // java/nio/ByteBuffer.position:()I
   #75 = NameAndType        #76:#77          // position:()I
   #76 = Utf8               position
   #77 = Utf8               ()I
   #78 = Methodref          #8.#79           // java/nio/ByteBuffer.limit:()I
   #79 = NameAndType        #80:#77          // limit:()I
   #80 = Utf8               limit
   #81 = Class              #82              // java/nio/BufferUnderflowException
   #82 = Utf8               java/nio/BufferUnderflowException
   #83 = Methodref          #81.#62          // java/nio/BufferUnderflowException."<init>":()V
   #84 = Methodref          #8.#85           // java/nio/ByteBuffer.getArray:(I[BII)Ljava/nio/ByteBuffer;
   #85 = NameAndType        #86:#87          // getArray:(I[BII)Ljava/nio/ByteBuffer;
   #86 = Utf8               getArray
   #87 = Utf8               (I[BII)Ljava/nio/ByteBuffer;
   #88 = Methodref          #8.#89           // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;
   #89 = NameAndType        #76:#90          // position:(I)Ljava/nio/ByteBuffer;
   #90 = Utf8               (I)Ljava/nio/ByteBuffer;
   #91 = Methodref          #8.#92           // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
   #92 = NameAndType        #93:#67          // get:([BII)Ljava/nio/ByteBuffer;
   #93 = Utf8               get
   #94 = Methodref          #8.#95           // java/nio/ByteBuffer.get:(I[BII)Ljava/nio/ByteBuffer;
   #95 = NameAndType        #93:#87          // get:(I[BII)Ljava/nio/ByteBuffer;
   #96 = Class              #97              // java/nio/Bits
   #97 = Utf8               java/nio/Bits
   #98 = Long               6l
  #100 = Fieldref           #8.#101          // java/nio/ByteBuffer.address:J
  #101 = NameAndType        #102:#103        // address:J
  #102 = Utf8               address
  #103 = Utf8               J
  #104 = Fieldref           #8.#105          // java/nio/ByteBuffer.ARRAY_BASE_OFFSET:J
  #105 = NameAndType        #106:#103        // ARRAY_BASE_OFFSET:J
  #106 = Utf8               ARRAY_BASE_OFFSET
  #107 = Fieldref           #8.#108          // java/nio/ByteBuffer.SCOPED_MEMORY_ACCESS:Ljdk/internal/misc/ScopedMemoryAccess;
  #108 = NameAndType        #109:#110        // SCOPED_MEMORY_ACCESS:Ljdk/internal/misc/ScopedMemoryAccess;
  #109 = Utf8               SCOPED_MEMORY_ACCESS
  #110 = Utf8               Ljdk/internal/misc/ScopedMemoryAccess;
  #111 = Methodref          #8.#112          // java/nio/ByteBuffer.session:()Ljdk/internal/foreign/MemorySessionImpl;
  #112 = NameAndType        #113:#114        // session:()Ljdk/internal/foreign/MemorySessionImpl;
  #113 = Utf8               session
  #114 = Utf8               ()Ljdk/internal/foreign/MemorySessionImpl;
  #115 = Methodref          #8.#116          // java/nio/ByteBuffer.base:()Ljava/lang/Object;
  #116 = NameAndType        #117:#118        // base:()Ljava/lang/Object;
  #117 = Utf8               base
  #118 = Utf8               ()Ljava/lang/Object;
  #119 = Methodref          #120.#121        // jdk/internal/misc/ScopedMemoryAccess.copyMemory:(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V
  #120 = Class              #122             // jdk/internal/misc/ScopedMemoryAccess
  #121 = NameAndType        #123:#124        // copyMemory:(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V
  #122 = Utf8               jdk/internal/misc/ScopedMemoryAccess
  #123 = Utf8               copyMemory
  #124 = Utf8               (Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V
  #125 = Methodref          #126.#127        // java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
  #126 = Class              #128             // java/lang/ref/Reference
  #127 = NameAndType        #129:#130        // reachabilityFence:(Ljava/lang/Object;)V
  #128 = Utf8               java/lang/ref/Reference
  #129 = Utf8               reachabilityFence
  #130 = Utf8               (Ljava/lang/Object;)V
  #131 = Methodref          #8.#132          // java/nio/ByteBuffer.get:(I)B
  #132 = NameAndType        #93:#133         // get:(I)B
  #133 = Utf8               (I)B
  #134 = Methodref          #8.#135          // java/nio/ByteBuffer.createSameBufferException:()Ljava/lang/IllegalArgumentException;
  #135 = NameAndType        #136:#137        // createSameBufferException:()Ljava/lang/IllegalArgumentException;
  #136 = Utf8               createSameBufferException
  #137 = Utf8               ()Ljava/lang/IllegalArgumentException;
  #138 = Methodref          #8.#139          // java/nio/ByteBuffer.isReadOnly:()Z
  #139 = NameAndType        #140:#141        // isReadOnly:()Z
  #140 = Utf8               isReadOnly
  #141 = Utf8               ()Z
  #142 = Class              #143             // java/nio/ReadOnlyBufferException
  #143 = Utf8               java/nio/ReadOnlyBufferException
  #144 = Methodref          #142.#62         // java/nio/ReadOnlyBufferException."<init>":()V
  #145 = Class              #146             // java/nio/BufferOverflowException
  #146 = Utf8               java/nio/BufferOverflowException
  #147 = Methodref          #145.#62         // java/nio/BufferOverflowException."<init>":()V
  #148 = Methodref          #8.#149          // java/nio/ByteBuffer.putBuffer:(ILjava/nio/ByteBuffer;II)V
  #149 = NameAndType        #150:#151        // putBuffer:(ILjava/nio/ByteBuffer;II)V
  #150 = Utf8               putBuffer
  #151 = Utf8               (ILjava/nio/ByteBuffer;II)V
  #152 = Fieldref           #8.#153          // java/nio/ByteBuffer.$assertionsDisabled:Z
  #153 = NameAndType        #154:#12         // $assertionsDisabled:Z
  #154 = Utf8               $assertionsDisabled
  #155 = Methodref          #8.#156          // java/nio/ByteBuffer.isDirect:()Z
  #156 = NameAndType        #157:#141        // isDirect:()Z
  #157 = Utf8               isDirect
  #158 = Class              #159             // java/lang/AssertionError
  #159 = Utf8               java/lang/AssertionError
  #160 = Methodref          #158.#62         // java/lang/AssertionError."<init>":()V
  #161 = Methodref          #8.#162          // java/nio/ByteBuffer.putArray:(I[BII)Ljava/nio/ByteBuffer;
  #162 = NameAndType        #163:#87         // putArray:(I[BII)Ljava/nio/ByteBuffer;
  #163 = Utf8               putArray
  #164 = Methodref          #8.#165          // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
  #165 = NameAndType        #166:#67         // put:([BII)Ljava/nio/ByteBuffer;
  #166 = Utf8               put
  #167 = Methodref          #8.#168          // java/nio/ByteBuffer.put:(I[BII)Ljava/nio/ByteBuffer;
  #168 = NameAndType        #166:#87         // put:(I[BII)Ljava/nio/ByteBuffer;
  #169 = Methodref          #8.#170          // java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
  #170 = NameAndType        #166:#171        // put:(IB)Ljava/nio/ByteBuffer;
  #171 = Utf8               (IB)Ljava/nio/ByteBuffer;
  #172 = Fieldref           #8.#173          // java/nio/ByteBuffer.isReadOnly:Z
  #173 = NameAndType        #140:#12         // isReadOnly:Z
  #174 = Class              #175             // java/lang/UnsupportedOperationException
  #175 = Utf8               java/lang/UnsupportedOperationException
  #176 = Methodref          #174.#62         // java/lang/UnsupportedOperationException."<init>":()V
  #177 = Methodref          #2.#178          // java/nio/Buffer.position:(I)Ljava/nio/Buffer;
  #178 = NameAndType        #76:#179         // position:(I)Ljava/nio/Buffer;
  #179 = Utf8               (I)Ljava/nio/Buffer;
  #180 = Methodref          #2.#181          // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
  #181 = NameAndType        #80:#179         // limit:(I)Ljava/nio/Buffer;
  #182 = Methodref          #2.#183          // java/nio/Buffer.mark:()Ljava/nio/Buffer;
  #183 = NameAndType        #184:#185        // mark:()Ljava/nio/Buffer;
  #184 = Utf8               mark
  #185 = Utf8               ()Ljava/nio/Buffer;
  #186 = Methodref          #2.#187          // java/nio/Buffer.reset:()Ljava/nio/Buffer;
  #187 = NameAndType        #188:#185        // reset:()Ljava/nio/Buffer;
  #188 = Utf8               reset
  #189 = Methodref          #2.#190          // java/nio/Buffer.clear:()Ljava/nio/Buffer;
  #190 = NameAndType        #191:#185        // clear:()Ljava/nio/Buffer;
  #191 = Utf8               clear
  #192 = Methodref          #2.#193          // java/nio/Buffer.flip:()Ljava/nio/Buffer;
  #193 = NameAndType        #194:#185        // flip:()Ljava/nio/Buffer;
  #194 = Utf8               flip
  #195 = Methodref          #2.#196          // java/nio/Buffer.rewind:()Ljava/nio/Buffer;
  #196 = NameAndType        #197:#185        // rewind:()Ljava/nio/Buffer;
  #197 = Utf8               rewind
  #198 = Class              #199             // java/lang/StringBuilder
  #199 = Utf8               java/lang/StringBuilder
  #200 = Methodref          #198.#62         // java/lang/StringBuilder."<init>":()V
  #201 = Methodref          #202.#203        // java/lang/Object.getClass:()Ljava/lang/Class;
  #202 = Class              #204             // java/lang/Object
  #203 = NameAndType        #205:#206        // getClass:()Ljava/lang/Class;
  #204 = Utf8               java/lang/Object
  #205 = Utf8               getClass
  #206 = Utf8               ()Ljava/lang/Class;
  #207 = Methodref          #208.#209        // java/lang/Class.getName:()Ljava/lang/String;
  #208 = Class              #210             // java/lang/Class
  #209 = NameAndType        #211:#212        // getName:()Ljava/lang/String;
  #210 = Utf8               java/lang/Class
  #211 = Utf8               getName
  #212 = Utf8               ()Ljava/lang/String;
  #213 = Methodref          #198.#214        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #214 = NameAndType        #215:#216        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #215 = Utf8               append
  #216 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #217 = String             #218             // [pos=
  #218 = Utf8               [pos=
  #219 = Methodref          #198.#220        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
  #220 = NameAndType        #215:#221        // append:(I)Ljava/lang/StringBuilder;
  #221 = Utf8               (I)Ljava/lang/StringBuilder;
  #222 = String             #223             //  lim=
  #223 = Utf8                lim=
  #224 = String             #225             //  cap=
  #225 = Utf8                cap=
  #226 = Methodref          #8.#227          // java/nio/ByteBuffer.capacity:()I
  #227 = NameAndType        #228:#77         // capacity:()I
  #228 = Utf8               capacity
  #229 = String             #230             // ]
  #230 = Utf8               ]
  #231 = Methodref          #198.#232        // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #232 = NameAndType        #233:#212        // toString:()Ljava/lang/String;
  #233 = Utf8               toString
  #234 = Methodref          #235.#236        // java/nio/BufferMismatch.mismatch:(Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)I
  #235 = Class              #237             // java/nio/BufferMismatch
  #236 = NameAndType        #238:#239        // mismatch:(Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)I
  #237 = Utf8               java/nio/BufferMismatch
  #238 = Utf8               mismatch
  #239 = Utf8               (Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)I
  #240 = Methodref          #241.#242        // java/lang/Math.min:(II)I
  #241 = Class              #243             // java/lang/Math
  #242 = NameAndType        #244:#245        // min:(II)I
  #243 = Utf8               java/lang/Math
  #244 = Utf8               min
  #245 = Utf8               (II)I
  #246 = Methodref          #8.#247          // java/nio/ByteBuffer.compare:(BB)I
  #247 = NameAndType        #248:#249        // compare:(BB)I
  #248 = Utf8               compare
  #249 = Utf8               (BB)I
  #250 = Methodref          #251.#247        // java/lang/Byte.compare:(BB)I
  #251 = Class              #252             // java/lang/Byte
  #252 = Utf8               java/lang/Byte
  #253 = Fieldref           #14.#254         // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
  #254 = NameAndType        #255:#22         // LITTLE_ENDIAN:Ljava/nio/ByteOrder;
  #255 = Utf8               LITTLE_ENDIAN
  #256 = String             #257             // Index less than zero: 
  #257 = Utf8               Index less than zero: 
  #258 = Methodref          #57.#259         // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
  #259 = NameAndType        #5:#260          // "<init>":(Ljava/lang/String;)V
  #260 = Utf8               (Ljava/lang/String;)V
  #261 = String             #262             // Unit size not a power of two: 
  #262 = Utf8               Unit size not a power of two: 
  #263 = String             #264             // Unit size unsupported for non-direct buffers: 
  #264 = Utf8               Unit size unsupported for non-direct buffers: 
  #265 = Methodref          #174.#259        // java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
  #266 = Methodref          #8.#267          // java/nio/ByteBuffer.alignmentOffset:(II)I
  #267 = NameAndType        #268:#245        // alignmentOffset:(II)I
  #268 = Utf8               alignmentOffset
  #269 = Methodref          #8.#270          // java/nio/ByteBuffer.slice:(II)Ljava/nio/ByteBuffer;
  #270 = NameAndType        #271:#272        // slice:(II)Ljava/nio/ByteBuffer;
  #271 = Utf8               slice
  #272 = Utf8               (II)Ljava/nio/ByteBuffer;
  #273 = Methodref          #8.#274          // java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
  #274 = NameAndType        #275:#276        // duplicate:()Ljava/nio/ByteBuffer;
  #275 = Utf8               duplicate
  #276 = Utf8               ()Ljava/nio/ByteBuffer;
  #277 = Methodref          #8.#278          // java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
  #278 = NameAndType        #271:#276        // slice:()Ljava/nio/ByteBuffer;
  #279 = Methodref          #8.#280          // java/nio/ByteBuffer.array:()[B
  #280 = NameAndType        #281:#282        // array:()[B
  #281 = Utf8               array
  #282 = Utf8               ()[B
  #283 = Methodref          #8.#284          // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;
  #284 = NameAndType        #197:#276        // rewind:()Ljava/nio/ByteBuffer;
  #285 = Methodref          #8.#286          // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;
  #286 = NameAndType        #194:#276        // flip:()Ljava/nio/ByteBuffer;
  #287 = Methodref          #8.#288          // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;
  #288 = NameAndType        #191:#276        // clear:()Ljava/nio/ByteBuffer;
  #289 = Methodref          #8.#290          // java/nio/ByteBuffer.reset:()Ljava/nio/ByteBuffer;
  #290 = NameAndType        #188:#276        // reset:()Ljava/nio/ByteBuffer;
  #291 = Methodref          #8.#292          // java/nio/ByteBuffer.mark:()Ljava/nio/ByteBuffer;
  #292 = NameAndType        #184:#276        // mark:()Ljava/nio/ByteBuffer;
  #293 = Methodref          #8.#294          // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;
  #294 = NameAndType        #80:#90          // limit:(I)Ljava/nio/ByteBuffer;
  #295 = Methodref          #8.#296          // java/nio/ByteBuffer.compareTo:(Ljava/nio/ByteBuffer;)I
  #296 = NameAndType        #297:#298        // compareTo:(Ljava/nio/ByteBuffer;)I
  #297 = Utf8               compareTo
  #298 = Utf8               (Ljava/nio/ByteBuffer;)I
  #299 = Methodref          #208.#300        // java/lang/Class.desiredAssertionStatus:()Z
  #300 = NameAndType        #301:#141        // desiredAssertionStatus:()Z
  #301 = Utf8               desiredAssertionStatus
  #302 = Fieldref           #8.#303          // java/nio/ByteBuffer.UNSAFE:Ljdk/internal/misc/Unsafe;
  #303 = NameAndType        #304:#305        // UNSAFE:Ljdk/internal/misc/Unsafe;
  #304 = Utf8               UNSAFE
  #305 = Utf8               Ljdk/internal/misc/Unsafe;
  #306 = Class              #29              // "[B"
  #307 = Methodref          #308.#309        // jdk/internal/misc/Unsafe.arrayBaseOffset:(Ljava/lang/Class;)I
  #308 = Class              #310             // jdk/internal/misc/Unsafe
  #309 = NameAndType        #311:#312        // arrayBaseOffset:(Ljava/lang/Class;)I
  #310 = Utf8               jdk/internal/misc/Unsafe
  #311 = Utf8               arrayBaseOffset
  #312 = Utf8               (Ljava/lang/Class;)I
  #313 = Class              #314             // java/lang/Comparable
  #314 = Utf8               java/lang/Comparable
  #315 = Utf8               Code
  #316 = Utf8               LineNumberTable
  #317 = Utf8               LocalVariableTable
  #318 = Utf8               this
  #319 = Utf8               Ljava/nio/ByteBuffer;
  #320 = Utf8               pos
  #321 = Utf8               lim
  #322 = Utf8               cap
  #323 = Utf8               segment
  #324 = Utf8               Ljava/lang/foreign/MemorySegment;
  #325 = Utf8               StackMapTable
  #326 = Class              #327             // java/lang/foreign/MemorySegment
  #327 = Utf8               java/lang/foreign/MemorySegment
  #328 = Utf8               ([BJILjava/lang/foreign/MemorySegment;)V
  #329 = Utf8               addr
  #330 = Utf8               allocateDirect
  #331 = Utf8               allocate
  #332 = Utf8               x
  #333 = Utf8               Ljava/lang/IllegalArgumentException;
  #334 = Utf8               length
  #335 = Utf8               ([B)Ljava/nio/ByteBuffer;
  #336 = Utf8               asReadOnlyBuffer
  #337 = Utf8               ()B
  #338 = Utf8               (B)Ljava/nio/ByteBuffer;
  #339 = Utf8               dst
  #340 = Utf8               index
  #341 = Utf8               (I[B)Ljava/nio/ByteBuffer;
  #342 = Utf8               bufAddr
  #343 = Utf8               dstOffset
  #344 = Utf8               len
  #345 = Utf8               i
  #346 = Utf8               j
  #347 = Utf8               end
  #348 = Class              #349             // java/lang/Throwable
  #349 = Utf8               java/lang/Throwable
  #350 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
  #351 = Utf8               src
  #352 = Utf8               srcPos
  #353 = Utf8               srcLim
  #354 = Utf8               srcRem
  #355 = Utf8               rem
  #356 = Utf8               (ILjava/nio/ByteBuffer;II)Ljava/nio/ByteBuffer;
  #357 = Utf8               n
  #358 = Utf8               srcBase
  #359 = Utf8               Ljava/lang/Object;
  #360 = Utf8               srcAddr
  #361 = Utf8               srcOffset
  #362 = Utf8               hasArray
  #363 = Utf8               arrayOffset
  #364 = Utf8               newPosition
  #365 = Utf8               newLimit
  #366 = Utf8               compact
  #367 = Utf8               hashCode
  #368 = Utf8               h
  #369 = Utf8               p
  #370 = Utf8               equals
  #371 = Utf8               (Ljava/lang/Object;)Z
  #372 = Utf8               ob
  #373 = Utf8               that
  #374 = Utf8               thisPos
  #375 = Utf8               thisRem
  #376 = Utf8               thatPos
  #377 = Utf8               thatRem
  #378 = Utf8               B
  #379 = Utf8               y
  #380 = Utf8               r
  #381 = Utf8               order
  #382 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
  #383 = Utf8               bo
  #384 = Utf8               unitSize
  #385 = Utf8               alignedSlice
  #386 = Utf8               pos_mod
  #387 = Utf8               lim_mod
  #388 = Utf8               aligned_pos
  #389 = Utf8               aligned_lim
  #390 = Utf8               getChar
  #391 = Utf8               ()C
  #392 = Utf8               putChar
  #393 = Utf8               (C)Ljava/nio/ByteBuffer;
  #394 = Utf8               (I)C
  #395 = Utf8               (IC)Ljava/nio/ByteBuffer;
  #396 = Utf8               asCharBuffer
  #397 = Utf8               ()Ljava/nio/CharBuffer;
  #398 = Utf8               getShort
  #399 = Utf8               ()S
  #400 = Utf8               putShort
  #401 = Utf8               (S)Ljava/nio/ByteBuffer;
  #402 = Utf8               (I)S
  #403 = Utf8               (IS)Ljava/nio/ByteBuffer;
  #404 = Utf8               asShortBuffer
  #405 = Utf8               ()Ljava/nio/ShortBuffer;
  #406 = Utf8               getInt
  #407 = Utf8               putInt
  #408 = Utf8               (I)I
  #409 = Utf8               asIntBuffer
  #410 = Utf8               ()Ljava/nio/IntBuffer;
  #411 = Utf8               getLong
  #412 = Utf8               ()J
  #413 = Utf8               putLong
  #414 = Utf8               (J)Ljava/nio/ByteBuffer;
  #415 = Utf8               (I)J
  #416 = Utf8               (IJ)Ljava/nio/ByteBuffer;
  #417 = Utf8               asLongBuffer
  #418 = Utf8               ()Ljava/nio/LongBuffer;
  #419 = Utf8               getFloat
  #420 = Utf8               ()F
  #421 = Utf8               putFloat
  #422 = Utf8               (F)Ljava/nio/ByteBuffer;
  #423 = Utf8               (I)F
  #424 = Utf8               (IF)Ljava/nio/ByteBuffer;
  #425 = Utf8               asFloatBuffer
  #426 = Utf8               ()Ljava/nio/FloatBuffer;
  #427 = Utf8               getDouble
  #428 = Utf8               ()D
  #429 = Utf8               putDouble
  #430 = Utf8               (D)Ljava/nio/ByteBuffer;
  #431 = Utf8               (I)D
  #432 = Utf8               (ID)Ljava/nio/ByteBuffer;
  #433 = Utf8               asDoubleBuffer
  #434 = Utf8               ()Ljava/nio/DoubleBuffer;
  #435 = Utf8               (II)Ljava/nio/Buffer;
  #436 = Utf8               MethodParameters
  #437 = Utf8               (Ljava/lang/Object;)I
  #438 = Utf8               <clinit>
  #439 = Utf8               Signature
  #440 = Utf8               Ljava/nio/Buffer;Ljava/lang/Comparable<Ljava/nio/ByteBuffer;>;
  #441 = Utf8               SourceFile
  #442 = Utf8               ByteBuffer.java
  #443 = Utf8               PermittedSubclasses
  #444 = Class              #445             // java/nio/MappedByteBuffer
  #445 = Utf8               java/nio/MappedByteBuffer
{
  private static final long ARRAY_BASE_OFFSET;
    descriptor: J
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
  
  final byte[] hb;
    descriptor: [B
    flags: (0x0010) ACC_FINAL
  
  final int offset;
    descriptor: I
    flags: (0x0010) ACC_FINAL
  
  boolean isReadOnly;
    descriptor: Z
    flags: (0x0000) 
  
  boolean bigEndian;
    descriptor: Z
    flags: (0x0000) 
  
  boolean nativeByteOrder;
    descriptor: Z
    flags: (0x0000) 
  
  static final boolean $assertionsDisabled;
    descriptor: Z
    flags: (0x1018) ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
  
  java.nio.ByteBuffer(int, int, int, int, byte[], int, java.lang.foreign.MemorySegment);
    descriptor: (IIII[BILjava/lang/foreign/MemorySegment;)V
    flags: (0x0000) 
    Code: 
      stack=6, locals=8, args_size=8
         0: aload_0                 
         1: iload_1                 
         2: iload_2                 
         3: iload_3                 
         4: iload         4                 
         6: aload         7                 
         8: invokespecial #1                  // Method java/nio/Buffer."<init>":(IIIILjava/lang/foreign/MemorySegment;)V
        11: aload_0                 
        12: iconst_1                
        13: putfield      #7                  // Field bigEndian:Z
        16: aload_0                 
        17: invokestatic  #13                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
        20: getstatic     #19                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
        23: if_acmpne     30                
        26: iconst_1                
        27: goto          31                
        30: iconst_0                
        31: putfield      #23                 // Field nativeByteOrder:Z
        34: aload_0                 
        35: aload         5                 
        37: putfield      #26                 // Field hb:[B
        40: aload_0                 
        41: iload         6                 
        43: putfield      #30                 // Field offset:I
        46: return                  
      LineNumberTable:
        line 323: 0
        line 2154: 11
        line 2156: 16
        line 2157: 17
        line 324: 34
        line 325: 40
        line 326: 46
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       47     0  this   Ljava/nio/ByteBuffer;
           0       47     1  mark   I
           0       47     2  pos    I
           0       47     3  lim    I
           0       47     4  cap    I
           0       47     5  hb     [B
           0       47     6  offset I
           0       47     7  segment Ljava/lang/foreign/MemorySegment;
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 30
          locals = [class java/nio/ByteBuffer, int, int, int, int, class "[B", int, class java/lang/foreign/MemorySegment]
          stack = [class java/nio/ByteBuffer]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [class java/nio/ByteBuffer, int, int, int, int, class "[B", int, class java/lang/foreign/MemorySegment]
          stack = [class java/nio/ByteBuffer, int]
  
  java.nio.ByteBuffer(int, int, int, int, java.lang.foreign.MemorySegment);
    descriptor: (IIIILjava/lang/foreign/MemorySegment;)V
    flags: (0x0000) 
    Code: 
      stack=8, locals=6, args_size=6
         0: aload_0                 
         1: iload_1                 
         2: iload_2                 
         3: iload_3                 
         4: iload         4                 
         6: aconst_null             
         7: iconst_0                
         8: aload         5                 
        10: invokespecial #34                 // Method "<init>":(IIII[BILjava/lang/foreign/MemorySegment;)V
        13: return                  
      LineNumberTable:
        line 331: 0
        line 332: 13
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       14     0  this   Ljava/nio/ByteBuffer;
           0       14     1  mark   I
           0       14     2  pos    I
           0       14     3  lim    I
           0       14     4  cap    I
           0       14     5  segment Ljava/lang/foreign/MemorySegment;
  
  java.nio.ByteBuffer(byte[], long, int, java.lang.foreign.MemorySegment);
    descriptor: ([BJILjava/lang/foreign/MemorySegment;)V
    flags: (0x0000) 
    Code: 
      stack=5, locals=6, args_size=5
         0: aload_0                 
         1: lload_2                 
         2: iload         4                 
         4: aload         5                 
         6: invokespecial #37                 // Method java/nio/Buffer."<init>":(JILjava/lang/foreign/MemorySegment;)V
         9: aload_0                 
        10: iconst_1                
        11: putfield      #7                  // Field bigEndian:Z
        14: aload_0                 
        15: invokestatic  #13                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
        18: getstatic     #19                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
        21: if_acmpne     28                
        24: iconst_1                
        25: goto          29                
        28: iconst_0                
        29: putfield      #23                 // Field nativeByteOrder:Z
        32: aload_0                 
        33: aload_1                 
        34: putfield      #26                 // Field hb:[B
        37: aload_0                 
        38: iconst_0                
        39: putfield      #30                 // Field offset:I
        42: return                  
      LineNumberTable:
        line 337: 0
        line 2154: 9
        line 2156: 14
        line 2157: 15
        line 338: 32
        line 339: 37
        line 340: 42
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       43     0  this   Ljava/nio/ByteBuffer;
           0       43     1  hb     [B
           0       43     2  addr   J
           0       43     4  cap    I
           0       43     5  segment Ljava/lang/foreign/MemorySegment;
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 28
          locals = [class java/nio/ByteBuffer, class "[B", long, int, class java/lang/foreign/MemorySegment]
          stack = [class java/nio/ByteBuffer]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [class java/nio/ByteBuffer, class "[B", long, int, class java/lang/foreign/MemorySegment]
          stack = [class java/nio/ByteBuffer, int]
  
  java.lang.Object base();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0000) 
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: getfield      #26                 // Field hb:[B
         4: areturn                 
      LineNumberTable:
        line 344: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public static java.nio.ByteBuffer allocateDirect(int);
    descriptor: (I)Ljava/nio/ByteBuffer;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code: 
      stack=3, locals=1, args_size=1
         0: new           #40                 // class java/nio/DirectByteBuffer
         3: dup                     
         4: iload_0                 
         5: invokespecial #42                 // Method java/nio/DirectByteBuffer."<init>":(I)V
         8: areturn                 
      LineNumberTable:
        line 367: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        9     0  capacity I
  
  public static java.nio.ByteBuffer allocate(int);
    descriptor: (I)Ljava/nio/ByteBuffer;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code: 
      stack=5, locals=1, args_size=1
         0: iload_0                 
         1: ifge          9                 
         4: iload_0                 
         5: invokestatic  #45                 // Method createCapacityException:(I)Ljava/lang/IllegalArgumentException;
         8: athrow                  
         9: new           #49                 // class java/nio/HeapByteBuffer
        12: dup                     
        13: iload_0                 
        14: iload_0                 
        15: aconst_null             
        16: invokespecial #51                 // Method java/nio/HeapByteBuffer."<init>":(IILjava/lang/foreign/MemorySegment;)V
        19: areturn                 
      LineNumberTable:
        line 396: 0
        line 397: 4
        line 398: 9
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       20     0  capacity I
      StackMapTable: number_of_entries = 1
        frame_type = 9 /* same */
  
  public static java.nio.ByteBuffer wrap(byte[], int, int);
    descriptor: ([BII)Ljava/nio/ByteBuffer;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code: 
      stack=6, locals=4, args_size=3
         0: new           #49                 // class java/nio/HeapByteBuffer
         3: dup                     
         4: aload_0                 
         5: iload_1                 
         6: iload_2                 
         7: aconst_null             
         8: invokespecial #54                 // Method java/nio/HeapByteBuffer."<init>":([BIILjava/lang/foreign/MemorySegment;)V
        11: areturn                 
        12: astore_3                
        13: new           #59                 // class java/lang/IndexOutOfBoundsException
        16: dup                     
        17: invokespecial #61                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
        20: athrow                  
      Exception table:
          from       to target type
             0       11    12  Class java/lang/IllegalArgumentException
      LineNumberTable:
        line 443: 0
        line 444: 12
        line 445: 13
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
          13        8     3  x      Ljava/lang/IllegalArgumentException;
           0       21     0  array  [B
           0       21     1  offset I
           0       21     2  length I
      StackMapTable: number_of_entries = 1
        frame_type = 76 /* same_locals_1_stack_item */
          stack = [ class java/lang/IllegalArgumentException ]
  
  public static java.nio.ByteBuffer wrap(byte[]);
    descriptor: ([B)Ljava/nio/ByteBuffer;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code: 
      stack=3, locals=1, args_size=1
         0: aload_0                 
         1: iconst_0                
         2: aload_0                 
         3: arraylength             
         4: invokestatic  #64                 // Method wrap:([BII)Ljava/nio/ByteBuffer;
         7: areturn                 
      LineNumberTable:
        line 472: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        8     0  array  [B
  
  public abstract java.nio.ByteBuffer slice();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer slice(int, int);
    descriptor: (II)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer duplicate();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer asReadOnlyBuffer();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract byte get();
    descriptor: ()B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer put(byte);
    descriptor: (B)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract byte get(int);
    descriptor: (I)B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer put(int, byte);
    descriptor: (IB)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public java.nio.ByteBuffer get(byte[], int, int);
    descriptor: ([BII)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=5, args_size=4
         0: iload_2                 
         1: iload_3                 
         2: aload_1                 
         3: arraylength             
         4: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
         7: pop                     
         8: aload_0                 
         9: invokevirtual #74                 // Method position:()I
        12: istore        4                 
        14: iload_3                 
        15: aload_0                 
        16: invokevirtual #78                 // Method limit:()I
        19: iload         4                 
        21: isub                    
        22: if_icmple     33                
        25: new           #81                 // class java/nio/BufferUnderflowException
        28: dup                     
        29: invokespecial #83                 // Method java/nio/BufferUnderflowException."<init>":()V
        32: athrow                  
        33: aload_0                 
        34: iload         4                 
        36: aload_1                 
        37: iload_2                 
        38: iload_3                 
        39: invokevirtual #84                 // Method getArray:(I[BII)Ljava/nio/ByteBuffer;
        42: pop                     
        43: aload_0                 
        44: iload         4                 
        46: iload_3                 
        47: iadd                    
        48: invokevirtual #88                 // Method position:(I)Ljava/nio/ByteBuffer;
        51: pop                     
        52: aload_0                 
        53: areturn                 
      LineNumberTable:
        line 833: 0
        line 834: 8
        line 835: 14
        line 836: 25
        line 838: 33
        line 840: 43
        line 841: 52
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       54     0  this   Ljava/nio/ByteBuffer;
           0       54     1  dst    [B
           0       54     2  offset I
           0       54     3  length I
          14       40     4  pos    I
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 33
          locals = [int]
  
  public java.nio.ByteBuffer get(byte[]);
    descriptor: ([B)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=4, locals=2, args_size=2
         0: aload_0                 
         1: aload_1                 
         2: iconst_0                
         3: aload_1                 
         4: arraylength             
         5: invokevirtual #91                 // Method get:([BII)Ljava/nio/ByteBuffer;
         8: areturn                 
      LineNumberTable:
        line 865: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        9     0  this   Ljava/nio/ByteBuffer;
           0        9     1  dst    [B
  
  public java.nio.ByteBuffer get(int, byte[], int, int);
    descriptor: (I[BII)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=5, args_size=5
         0: iload_1                 
         1: iload         4                 
         3: aload_0                 
         4: invokevirtual #78                 // Method limit:()I
         7: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        10: pop                     
        11: iload_3                 
        12: iload         4                 
        14: aload_2                 
        15: arraylength             
        16: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        19: pop                     
        20: aload_0                 
        21: iload_1                 
        22: aload_2                 
        23: iload_3                 
        24: iload         4                 
        26: invokevirtual #84                 // Method getArray:(I[BII)Ljava/nio/ByteBuffer;
        29: pop                     
        30: aload_0                 
        31: areturn                 
      LineNumberTable:
        line 913: 0
        line 914: 11
        line 916: 20
        line 918: 30
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       32     0  this   Ljava/nio/ByteBuffer;
           0       32     1  index  I
           0       32     2  dst    [B
           0       32     3  offset I
           0       32     4  length I
  
  public java.nio.ByteBuffer get(int, byte[]);
    descriptor: (I[B)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=3, args_size=3
         0: aload_0                 
         1: iload_1                 
         2: aload_2                 
         3: iconst_0                
         4: aload_2                 
         5: arraylength             
         6: invokevirtual #94                 // Method get:(I[BII)Ljava/nio/ByteBuffer;
         9: areturn                 
      LineNumberTable:
        line 950: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       10     0  this   Ljava/nio/ByteBuffer;
           0       10     1  index  I
           0       10     2  dst    [B
  
  private java.nio.ByteBuffer getArray(int, byte[], int, int);
    descriptor: (I[BII)Ljava/nio/ByteBuffer;
    flags: (0x0002) ACC_PRIVATE
    Code: 
      stack=11, locals=12, args_size=5
         0: iload         4                 
         2: i2l                     
         3: iconst_0                
         4: lshl                    
         5: ldc2_w        #98                 // long 6l
         8: lcmp                    
         9: ifle          81                
        12: aload_0                 
        13: getfield      #100                // Field address:J
        16: iload_1                 
        17: i2l                     
        18: iconst_0                
        19: lshl                    
        20: ladd                    
        21: lstore        5                 
        23: getstatic     #104                // Field ARRAY_BASE_OFFSET:J
        26: iload_3                 
        27: i2l                     
        28: iconst_0                
        29: lshl                    
        30: ladd                    
        31: lstore        7                 
        33: iload         4                 
        35: i2l                     
        36: iconst_0                
        37: lshl                    
        38: lstore        9                 
        40: getstatic     #107                // Field SCOPED_MEMORY_ACCESS:Ljdk/internal/misc/ScopedMemoryAccess;
        43: aload_0                 
        44: invokevirtual #111                // Method session:()Ljdk/internal/foreign/MemorySessionImpl;
        47: aconst_null             
        48: aload_0                 
        49: invokevirtual #115                // Method base:()Ljava/lang/Object;
        52: lload         5                 
        54: aload_2                 
        55: lload         7                 
        57: lload         9                 
        59: invokevirtual #119                // Method jdk/internal/misc/ScopedMemoryAccess.copyMemory:(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V
        62: aload_0                 
        63: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
        66: goto          78                
        69: astore        11                
        71: aload_0                 
        72: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
        75: aload         11                
        77: athrow                  
        78: goto          119               
        81: iload_3                 
        82: iload         4                 
        84: iadd                    
        85: istore        5                 
        87: iload_3                 
        88: istore        6                 
        90: iload_1                 
        91: istore        7                 
        93: iload         6                 
        95: iload         5                 
        97: if_icmpge     119               
       100: aload_2                 
       101: iload         6                 
       103: aload_0                 
       104: iload         7                 
       106: invokevirtual #131                // Method get:(I)B
       109: bastore                 
       110: iinc          6, 1              
       113: iinc          7, 1              
       116: goto          93                
       119: aload_0                 
       120: areturn                 
      Exception table:
          from       to target type
            40       62    69  any
            69       71    69  any
      LineNumberTable:
        line 954: 0
        line 959: 12
        line 960: 23
        line 962: 33
        line 972: 40
        line 973: 44
        line 972: 59
        line 976: 62
        line 977: 66
        line 976: 69
        line 977: 75
        line 978: 78
        line 979: 81
        line 980: 87
        line 981: 100
        line 980: 110
        line 984: 119
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
          23       55     5  bufAddr J
          33       45     7  dstOffset J
          40       38     9  len    J
          90       29     6  i      I
          93       26     7  j      I
          87       32     5  end    I
           0      121     0  this   Ljava/nio/ByteBuffer;
           0      121     1  index  I
           0      121     2  dst    [B
           0      121     3  offset I
           0      121     4  length I
      StackMapTable: number_of_entries = 5
        frame_type = 255 /* full_frame */
          offset_delta = 69
          locals = [class java/nio/ByteBuffer, int, class "[B", int, int, long, long, long]
          stack = [class java/lang/Throwable]
        frame_type = 248 /* chop */
          offset_delta = 8
        frame_type = 2 /* same */
        frame_type = 254 /* append */
          offset_delta = 11
          locals = [int, int, int]
        frame_type = 248 /* chop */
          offset_delta = 25
  
  public java.nio.ByteBuffer put(java.nio.ByteBuffer);
    descriptor: (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=8, args_size=2
         0: aload_1                 
         1: aload_0                 
         2: if_acmpne     9                 
         5: invokestatic  #134                // Method createSameBufferException:()Ljava/lang/IllegalArgumentException;
         8: athrow                  
         9: aload_0                 
        10: invokevirtual #138                // Method isReadOnly:()Z
        13: ifeq          24                
        16: new           #142                // class java/nio/ReadOnlyBufferException
        19: dup                     
        20: invokespecial #144                // Method java/nio/ReadOnlyBufferException."<init>":()V
        23: athrow                  
        24: aload_1                 
        25: invokevirtual #74                 // Method position:()I
        28: istore_2                
        29: aload_1                 
        30: invokevirtual #78                 // Method limit:()I
        33: istore_3                
        34: iload_2                 
        35: iload_3                 
        36: if_icmpgt     45                
        39: iload_3                 
        40: iload_2                 
        41: isub                    
        42: goto          46                
        45: iconst_0                
        46: istore        4                 
        48: aload_0                 
        49: invokevirtual #74                 // Method position:()I
        52: istore        5                 
        54: aload_0                 
        55: invokevirtual #78                 // Method limit:()I
        58: istore        6                 
        60: iload         5                 
        62: iload         6                 
        64: if_icmpgt     75                
        67: iload         6                 
        69: iload         5                 
        71: isub                    
        72: goto          76                
        75: iconst_0                
        76: istore        7                 
        78: iload         4                 
        80: iload         7                 
        82: if_icmple     93                
        85: new           #145                // class java/nio/BufferOverflowException
        88: dup                     
        89: invokespecial #147                // Method java/nio/BufferOverflowException."<init>":()V
        92: athrow                  
        93: aload_0                 
        94: iload         5                 
        96: aload_1                 
        97: iload_2                 
        98: iload         4                 
       100: invokevirtual #148                // Method putBuffer:(ILjava/nio/ByteBuffer;II)V
       103: aload_0                 
       104: iload         5                 
       106: iload         4                 
       108: iadd                    
       109: invokevirtual #88                 // Method position:(I)Ljava/nio/ByteBuffer;
       112: pop                     
       113: aload_1                 
       114: iload_2                 
       115: iload         4                 
       117: iadd                    
       118: invokevirtual #88                 // Method position:(I)Ljava/nio/ByteBuffer;
       121: pop                     
       122: aload_0                 
       123: areturn                 
      LineNumberTable:
        line 1035: 0
        line 1036: 5
        line 1037: 9
        line 1038: 16
        line 1040: 24
        line 1041: 29
        line 1042: 34
        line 1043: 48
        line 1044: 54
        line 1045: 60
        line 1047: 78
        line 1048: 85
        line 1050: 93
        line 1052: 103
        line 1053: 113
        line 1055: 122
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0      124     0  this   Ljava/nio/ByteBuffer;
           0      124     1  src    Ljava/nio/ByteBuffer;
          29       95     2  srcPos I
          34       90     3  srcLim I
          48       76     4  srcRem I
          54       70     5  pos    I
          60       64     6  lim    I
          78       46     7  rem    I
      StackMapTable: number_of_entries = 7
        frame_type = 9 /* same */
        frame_type = 14 /* same */
        frame_type = 253 /* append */
          offset_delta = 20
          locals = [int, int]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 254 /* append */
          offset_delta = 28
          locals = [int, int, int]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 252 /* append */
          offset_delta = 16
          locals = [int]
  
  public java.nio.ByteBuffer put(int, java.nio.ByteBuffer, int, int);
    descriptor: (ILjava/nio/ByteBuffer;II)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=5, args_size=5
         0: iload_1                 
         1: iload         4                 
         3: aload_0                 
         4: invokevirtual #78                 // Method limit:()I
         7: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        10: pop                     
        11: iload_3                 
        12: iload         4                 
        14: aload_2                 
        15: invokevirtual #78                 // Method limit:()I
        18: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        21: pop                     
        22: aload_0                 
        23: invokevirtual #138                // Method isReadOnly:()Z
        26: ifeq          37                
        29: new           #142                // class java/nio/ReadOnlyBufferException
        32: dup                     
        33: invokespecial #144                // Method java/nio/ReadOnlyBufferException."<init>":()V
        36: athrow                  
        37: aload_0                 
        38: iload_1                 
        39: aload_2                 
        40: iload_3                 
        41: iload         4                 
        43: invokevirtual #148                // Method putBuffer:(ILjava/nio/ByteBuffer;II)V
        46: aload_0                 
        47: areturn                 
      LineNumberTable:
        line 1109: 0
        line 1110: 11
        line 1111: 22
        line 1112: 29
        line 1114: 37
        line 1116: 46
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       48     0  this   Ljava/nio/ByteBuffer;
           0       48     1  index  I
           0       48     2  src    Ljava/nio/ByteBuffer;
           0       48     3  offset I
           0       48     4  length I
      StackMapTable: number_of_entries = 1
        frame_type = 37 /* same */
  
  void putBuffer(int, java.nio.ByteBuffer, int, int);
    descriptor: (ILjava/nio/ByteBuffer;II)V
    flags: (0x0000) 
    Code: 
      stack=11, locals=14, args_size=5
         0: aload_2                 
         1: invokevirtual #115                // Method base:()Ljava/lang/Object;
         4: astore        5                 
         6: getstatic     #152                // Field $assertionsDisabled:Z
         9: ifne          32                
        12: aload         5                 
        14: ifnonnull     32                
        17: aload_2                 
        18: invokevirtual #155                // Method isDirect:()Z
        21: ifne          32                
        24: new           #158                // class java/lang/AssertionError
        27: dup                     
        28: invokespecial #160                // Method java/lang/AssertionError."<init>":()V
        31: athrow                  
        32: aload_0                 
        33: invokevirtual #115                // Method base:()Ljava/lang/Object;
        36: astore        6                 
        38: getstatic     #152                // Field $assertionsDisabled:Z
        41: ifne          64                
        44: aload         6                 
        46: ifnonnull     64                
        49: aload_0                 
        50: invokevirtual #155                // Method isDirect:()Z
        53: ifne          64                
        56: new           #158                // class java/lang/AssertionError
        59: dup                     
        60: invokespecial #160                // Method java/lang/AssertionError."<init>":()V
        63: athrow                  
        64: aload_2                 
        65: getfield      #100                // Field address:J
        68: iload_3                 
        69: i2l                     
        70: iconst_0                
        71: lshl                    
        72: ladd                    
        73: lstore        7                 
        75: aload_0                 
        76: getfield      #100                // Field address:J
        79: iload_1                 
        80: i2l                     
        81: iconst_0                
        82: lshl                    
        83: ladd                    
        84: lstore        9                 
        86: iload         4                 
        88: i2l                     
        89: iconst_0                
        90: lshl                    
        91: lstore        11                
        93: getstatic     #107                // Field SCOPED_MEMORY_ACCESS:Ljdk/internal/misc/ScopedMemoryAccess;
        96: aload_2                 
        97: invokevirtual #111                // Method session:()Ljdk/internal/foreign/MemorySessionImpl;
       100: aload_0                 
       101: invokevirtual #111                // Method session:()Ljdk/internal/foreign/MemorySessionImpl;
       104: aload         5                 
       106: lload         7                 
       108: aload         6                 
       110: lload         9                 
       112: lload         11                
       114: invokevirtual #119                // Method jdk/internal/misc/ScopedMemoryAccess.copyMemory:(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V
       117: aload_2                 
       118: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
       121: aload_0                 
       122: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
       125: goto          141               
       128: astore        13                
       130: aload_2                 
       131: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
       134: aload_0                 
       135: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
       138: aload         13                
       140: athrow                  
       141: return                  
      Exception table:
          from       to target type
            93      117   128  any
           128      130   128  any
      LineNumberTable:
        line 1121: 0
        line 1125: 6
        line 1128: 32
        line 1129: 38
        line 1131: 64
        line 1132: 75
        line 1133: 86
        line 1143: 93
        line 1144: 97
        line 1143: 114
        line 1147: 117
        line 1148: 121
        line 1149: 125
        line 1147: 128
        line 1148: 134
        line 1149: 138
        line 1161: 141
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0      142     0  this   Ljava/nio/ByteBuffer;
           0      142     1  pos    I
           0      142     2  src    Ljava/nio/ByteBuffer;
           0      142     3  srcPos I
           0      142     4  n      I
           6      136     5  srcBase Ljava/lang/Object;
          38      104     6  base   Ljava/lang/Object;
          75       67     7  srcAddr J
          86       56     9  addr   J
          93       49    11  len    J
      StackMapTable: number_of_entries = 4
        frame_type = 252 /* append */
          offset_delta = 32
          locals = [class java/lang/Object]
        frame_type = 252 /* append */
          offset_delta = 31
          locals = [class java/lang/Object]
        frame_type = 255 /* full_frame */
          offset_delta = 63
          locals = [class java/nio/ByteBuffer, int, class java/nio/ByteBuffer, int, int, class java/lang/Object, class java/lang/Object, long, long, long]
          stack = [class java/lang/Throwable]
        frame_type = 12 /* same */
  
  public java.nio.ByteBuffer put(byte[], int, int);
    descriptor: ([BII)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=5, args_size=4
         0: aload_0                 
         1: invokevirtual #138                // Method isReadOnly:()Z
         4: ifeq          15                
         7: new           #142                // class java/nio/ReadOnlyBufferException
        10: dup                     
        11: invokespecial #144                // Method java/nio/ReadOnlyBufferException."<init>":()V
        14: athrow                  
        15: iload_2                 
        16: iload_3                 
        17: aload_1                 
        18: arraylength             
        19: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        22: pop                     
        23: aload_0                 
        24: invokevirtual #74                 // Method position:()I
        27: istore        4                 
        29: iload_3                 
        30: aload_0                 
        31: invokevirtual #78                 // Method limit:()I
        34: iload         4                 
        36: isub                    
        37: if_icmple     48                
        40: new           #145                // class java/nio/BufferOverflowException
        43: dup                     
        44: invokespecial #147                // Method java/nio/BufferOverflowException."<init>":()V
        47: athrow                  
        48: aload_0                 
        49: iload         4                 
        51: aload_1                 
        52: iload_2                 
        53: iload_3                 
        54: invokevirtual #161                // Method putArray:(I[BII)Ljava/nio/ByteBuffer;
        57: pop                     
        58: aload_0                 
        59: iload         4                 
        61: iload_3                 
        62: iadd                    
        63: invokevirtual #88                 // Method position:(I)Ljava/nio/ByteBuffer;
        66: pop                     
        67: aload_0                 
        68: areturn                 
      LineNumberTable:
        line 1215: 0
        line 1216: 7
        line 1217: 15
        line 1218: 23
        line 1219: 29
        line 1220: 40
        line 1222: 48
        line 1224: 58
        line 1225: 67
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       69     0  this   Ljava/nio/ByteBuffer;
           0       69     1  src    [B
           0       69     2  offset I
           0       69     3  length I
          29       40     4  pos    I
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 252 /* append */
          offset_delta = 32
          locals = [int]
  
  public final java.nio.ByteBuffer put(byte[]);
    descriptor: ([B)Ljava/nio/ByteBuffer;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=4, locals=2, args_size=2
         0: aload_0                 
         1: aload_1                 
         2: iconst_0                
         3: aload_1                 
         4: arraylength             
         5: invokevirtual #164                // Method put:([BII)Ljava/nio/ByteBuffer;
         8: areturn                 
      LineNumberTable:
        line 1252: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        9     0  this   Ljava/nio/ByteBuffer;
           0        9     1  src    [B
  
  public java.nio.ByteBuffer put(int, byte[], int, int);
    descriptor: (I[BII)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=5, args_size=5
         0: aload_0                 
         1: invokevirtual #138                // Method isReadOnly:()Z
         4: ifeq          15                
         7: new           #142                // class java/nio/ReadOnlyBufferException
        10: dup                     
        11: invokespecial #144                // Method java/nio/ReadOnlyBufferException."<init>":()V
        14: athrow                  
        15: iload_1                 
        16: iload         4                 
        18: aload_0                 
        19: invokevirtual #78                 // Method limit:()I
        22: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        25: pop                     
        26: iload_3                 
        27: iload         4                 
        29: aload_2                 
        30: arraylength             
        31: invokestatic  #68                 // Method java/util/Objects.checkFromIndexSize:(III)I
        34: pop                     
        35: aload_0                 
        36: iload_1                 
        37: aload_2                 
        38: iload_3                 
        39: iload         4                 
        41: invokevirtual #161                // Method putArray:(I[BII)Ljava/nio/ByteBuffer;
        44: pop                     
        45: aload_0                 
        46: areturn                 
      LineNumberTable:
        line 1301: 0
        line 1302: 7
        line 1303: 15
        line 1304: 26
        line 1306: 35
        line 1308: 45
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       47     0  this   Ljava/nio/ByteBuffer;
           0       47     1  index  I
           0       47     2  src    [B
           0       47     3  offset I
           0       47     4  length I
      StackMapTable: number_of_entries = 1
        frame_type = 15 /* same */
  
  public java.nio.ByteBuffer put(int, byte[]);
    descriptor: (I[B)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=3, args_size=3
         0: aload_0                 
         1: iload_1                 
         2: aload_2                 
         3: iconst_0                
         4: aload_2                 
         5: arraylength             
         6: invokevirtual #167                // Method put:(I[BII)Ljava/nio/ByteBuffer;
         9: areturn                 
      LineNumberTable:
        line 1342: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       10     0  this   Ljava/nio/ByteBuffer;
           0       10     1  index  I
           0       10     2  src    [B
  
  java.nio.ByteBuffer putArray(int, byte[], int, int);
    descriptor: (I[BII)Ljava/nio/ByteBuffer;
    flags: (0x0000) 
    Code: 
      stack=11, locals=12, args_size=5
         0: iload         4                 
         2: i2l                     
         3: iconst_0                
         4: lshl                    
         5: ldc2_w        #98                 // long 6l
         8: lcmp                    
         9: ifle          81                
        12: aload_0                 
        13: getfield      #100                // Field address:J
        16: iload_1                 
        17: i2l                     
        18: iconst_0                
        19: lshl                    
        20: ladd                    
        21: lstore        5                 
        23: getstatic     #104                // Field ARRAY_BASE_OFFSET:J
        26: iload_3                 
        27: i2l                     
        28: iconst_0                
        29: lshl                    
        30: ladd                    
        31: lstore        7                 
        33: iload         4                 
        35: i2l                     
        36: iconst_0                
        37: lshl                    
        38: lstore        9                 
        40: getstatic     #107                // Field SCOPED_MEMORY_ACCESS:Ljdk/internal/misc/ScopedMemoryAccess;
        43: aconst_null             
        44: aload_0                 
        45: invokevirtual #111                // Method session:()Ljdk/internal/foreign/MemorySessionImpl;
        48: aload_2                 
        49: lload         7                 
        51: aload_0                 
        52: invokevirtual #115                // Method base:()Ljava/lang/Object;
        55: lload         5                 
        57: lload         9                 
        59: invokevirtual #119                // Method jdk/internal/misc/ScopedMemoryAccess.copyMemory:(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V
        62: aload_0                 
        63: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
        66: goto          78                
        69: astore        11                
        71: aload_0                 
        72: invokestatic  #125                // Method java/lang/ref/Reference.reachabilityFence:(Ljava/lang/Object;)V
        75: aload         11                
        77: athrow                  
        78: goto          120               
        81: iload_3                 
        82: iload         4                 
        84: iadd                    
        85: istore        5                 
        87: iload_3                 
        88: istore        6                 
        90: iload_1                 
        91: istore        7                 
        93: iload         6                 
        95: iload         5                 
        97: if_icmpge     120               
       100: aload_0                 
       101: iload         7                 
       103: aload_2                 
       104: iload         6                 
       106: baload                  
       107: invokevirtual #169                // Method put:(IB)Ljava/nio/ByteBuffer;
       110: pop                     
       111: iinc          6, 1              
       114: iinc          7, 1              
       117: goto          93                
       120: aload_0                 
       121: areturn                 
      Exception table:
          from       to target type
            40       62    69  any
            69       71    69  any
      LineNumberTable:
        line 1347: 0
        line 1352: 12
        line 1353: 23
        line 1355: 33
        line 1365: 40
        line 1366: 45
        line 1367: 52
        line 1365: 59
        line 1369: 62
        line 1370: 66
        line 1369: 69
        line 1370: 75
        line 1371: 78
        line 1372: 81
        line 1373: 87
        line 1374: 100
        line 1373: 111
        line 1376: 120
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
          23       55     5  bufAddr J
          33       45     7  srcOffset J
          40       38     9  len    J
          90       30     6  i      I
          93       27     7  j      I
          87       33     5  end    I
           0      122     0  this   Ljava/nio/ByteBuffer;
           0      122     1  index  I
           0      122     2  src    [B
           0      122     3  offset I
           0      122     4  length I
      StackMapTable: number_of_entries = 5
        frame_type = 255 /* full_frame */
          offset_delta = 69
          locals = [class java/nio/ByteBuffer, int, class "[B", int, int, long, long, long]
          stack = [class java/lang/Throwable]
        frame_type = 248 /* chop */
          offset_delta = 8
        frame_type = 2 /* same */
        frame_type = 254 /* append */
          offset_delta = 11
          locals = [int, int, int]
        frame_type = 248 /* chop */
          offset_delta = 26
  
  public final boolean hasArray();
    descriptor: ()Z
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: getfield      #26                 // Field hb:[B
         4: ifnull        18                
         7: aload_0                 
         8: getfield      #172                // Field isReadOnly:Z
        11: ifne          18                
        14: iconst_1                
        15: goto          19                
        18: iconst_0                
        19: ireturn                 
      LineNumberTable:
        line 1491: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       20     0  this   Ljava/nio/ByteBuffer;
      StackMapTable: number_of_entries = 2
        frame_type = 18 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
  
  public final byte[] array();
    descriptor: ()[B
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=2, locals=1, args_size=1
         0: aload_0                 
         1: getfield      #26                 // Field hb:[B
         4: ifnonnull     15                
         7: new           #174                // class java/lang/UnsupportedOperationException
        10: dup                     
        11: invokespecial #176                // Method java/lang/UnsupportedOperationException."<init>":()V
        14: athrow                  
        15: aload_0                 
        16: getfield      #172                // Field isReadOnly:Z
        19: ifeq          30                
        22: new           #142                // class java/nio/ReadOnlyBufferException
        25: dup                     
        26: invokespecial #144                // Method java/nio/ReadOnlyBufferException."<init>":()V
        29: athrow                  
        30: aload_0                 
        31: getfield      #26                 // Field hb:[B
        34: areturn                 
      LineNumberTable:
        line 1514: 0
        line 1515: 7
        line 1516: 15
        line 1517: 22
        line 1518: 30
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       35     0  this   Ljava/nio/ByteBuffer;
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 14 /* same */
  
  public final int arrayOffset();
    descriptor: ()I
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=2, locals=1, args_size=1
         0: aload_0                 
         1: getfield      #26                 // Field hb:[B
         4: ifnonnull     15                
         7: new           #174                // class java/lang/UnsupportedOperationException
        10: dup                     
        11: invokespecial #176                // Method java/lang/UnsupportedOperationException."<init>":()V
        14: athrow                  
        15: aload_0                 
        16: getfield      #172                // Field isReadOnly:Z
        19: ifeq          30                
        22: new           #142                // class java/nio/ReadOnlyBufferException
        25: dup                     
        26: invokespecial #144                // Method java/nio/ReadOnlyBufferException."<init>":()V
        29: athrow                  
        30: aload_0                 
        31: getfield      #30                 // Field offset:I
        34: ireturn                 
      LineNumberTable:
        line 1542: 0
        line 1543: 7
        line 1544: 15
        line 1545: 22
        line 1546: 30
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       35     0  this   Ljava/nio/ByteBuffer;
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 14 /* same */
  
  public java.nio.ByteBuffer position(int);
    descriptor: (I)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=2, locals=2, args_size=2
         0: aload_0                 
         1: iload_1                 
         2: invokespecial #177                // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
         5: pop                     
         6: aload_0                 
         7: areturn                 
      LineNumberTable:
        line 1561: 0
        line 1562: 6
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        8     0  this   Ljava/nio/ByteBuffer;
           0        8     1  newPosition I
  
  public java.nio.ByteBuffer limit(int);
    descriptor: (I)Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=2, locals=2, args_size=2
         0: aload_0                 
         1: iload_1                 
         2: invokespecial #180                // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
         5: pop                     
         6: aload_0                 
         7: areturn                 
      LineNumberTable:
        line 1575: 0
        line 1576: 6
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        8     0  this   Ljava/nio/ByteBuffer;
           0        8     1  newLimit I
  
  public java.nio.ByteBuffer mark();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokespecial #182                // Method java/nio/Buffer.mark:()Ljava/nio/Buffer;
         4: pop                     
         5: aload_0                 
         6: areturn                 
      LineNumberTable:
        line 1589: 0
        line 1590: 5
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        7     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.ByteBuffer reset();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokespecial #186                // Method java/nio/Buffer.reset:()Ljava/nio/Buffer;
         4: pop                     
         5: aload_0                 
         6: areturn                 
      LineNumberTable:
        line 1603: 0
        line 1604: 5
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        7     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.ByteBuffer clear();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokespecial #189                // Method java/nio/Buffer.clear:()Ljava/nio/Buffer;
         4: pop                     
         5: aload_0                 
         6: areturn                 
      LineNumberTable:
        line 1617: 0
        line 1618: 5
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        7     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.ByteBuffer flip();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokespecial #192                // Method java/nio/Buffer.flip:()Ljava/nio/Buffer;
         4: pop                     
         5: aload_0                 
         6: areturn                 
      LineNumberTable:
        line 1631: 0
        line 1632: 5
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        7     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.ByteBuffer rewind();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokespecial #195                // Method java/nio/Buffer.rewind:()Ljava/nio/Buffer;
         4: pop                     
         5: aload_0                 
         6: areturn                 
      LineNumberTable:
        line 1645: 0
        line 1646: 5
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        7     0  this   Ljava/nio/ByteBuffer;
  
  public abstract java.nio.ByteBuffer compact();
    descriptor: ()Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract boolean isDirect();
    descriptor: ()Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=2, locals=1, args_size=1
         0: new           #198                // class java/lang/StringBuilder
         3: dup                     
         4: invokespecial #200                // Method java/lang/StringBuilder."<init>":()V
         7: aload_0                 
         8: invokevirtual #201                // Method java/lang/Object.getClass:()Ljava/lang/Class;
        11: invokevirtual #207                // Method java/lang/Class.getName:()Ljava/lang/String;
        14: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        17: ldc           #217                // String [pos=
        19: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        22: aload_0                 
        23: invokevirtual #74                 // Method position:()I
        26: invokevirtual #219                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        29: ldc           #222                // String  lim=
        31: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        34: aload_0                 
        35: invokevirtual #78                 // Method limit:()I
        38: invokevirtual #219                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        41: ldc           #224                // String  cap=
        43: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        46: aload_0                 
        47: invokevirtual #226                // Method capacity:()I
        50: invokevirtual #219                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        53: ldc           #229                // String ]
        55: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        58: invokevirtual #231                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        61: areturn                 
      LineNumberTable:
        line 1720: 0
        line 1721: 23
        line 1722: 35
        line 1723: 47
        line 1720: 61
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       62     0  this   Ljava/nio/ByteBuffer;
  
  public int hashCode();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=3, locals=4, args_size=1
         0: iconst_1                
         1: istore_1                
         2: aload_0                 
         3: invokevirtual #74                 // Method position:()I
         6: istore_2                
         7: aload_0                 
         8: invokevirtual #78                 // Method limit:()I
        11: iconst_1                
        12: isub                    
        13: istore_3                
        14: iload_3                 
        15: iload_2                 
        16: if_icmplt     36                
        19: bipush        31                
        21: iload_1                 
        22: imul                    
        23: aload_0                 
        24: iload_3                 
        25: invokevirtual #131                // Method get:(I)B
        28: iadd                    
        29: istore_1                
        30: iinc          3, -1             
        33: goto          14                
        36: iload_1                 
        37: ireturn                 
      LineNumberTable:
        line 1746: 0
        line 1747: 2
        line 1748: 7
        line 1752: 19
        line 1748: 30
        line 1754: 36
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
          14       22     3  i      I
           0       38     0  this   Ljava/nio/ByteBuffer;
           2       36     1  h      I
           7       31     2  p      I
      StackMapTable: number_of_entries = 2
        frame_type = 254 /* append */
          offset_delta = 14
          locals = [int, int, int]
        frame_type = 250 /* chop */
          offset_delta = 21
  
  public boolean equals(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=7, args_size=2
         0: aload_0                 
         1: aload_1                 
         2: if_acmpne     7                 
         5: iconst_1                
         6: ireturn                 
         7: aload_1                 
         8: instanceof    #8                  // class java/nio/ByteBuffer
        11: ifne          16                
        14: iconst_0                
        15: ireturn                 
        16: aload_1                 
        17: checkcast     #8                  // class java/nio/ByteBuffer
        20: astore_2                
        21: aload_0                 
        22: invokevirtual #74                 // Method position:()I
        25: istore_3                
        26: aload_0                 
        27: invokevirtual #78                 // Method limit:()I
        30: iload_3                 
        31: isub                    
        32: istore        4                 
        34: aload_2                 
        35: invokevirtual #74                 // Method position:()I
        38: istore        5                 
        40: aload_2                 
        41: invokevirtual #78                 // Method limit:()I
        44: iload         5                 
        46: isub                    
        47: istore        6                 
        49: iload         4                 
        51: iflt          61                
        54: iload         4                 
        56: iload         6                 
        58: if_icmpeq     63                
        61: iconst_0                
        62: ireturn                 
        63: aload_0                 
        64: iload_3                 
        65: aload_2                 
        66: iload         5                 
        68: iload         4                 
        70: invokestatic  #234                // Method java/nio/BufferMismatch.mismatch:(Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)I
        73: ifge          80                
        76: iconst_1                
        77: goto          81                
        80: iconst_0                
        81: ireturn                 
      LineNumberTable:
        line 1790: 0
        line 1791: 5
        line 1792: 7
        line 1793: 14
        line 1794: 16
        line 1795: 21
        line 1796: 26
        line 1797: 34
        line 1798: 40
        line 1799: 49
        line 1800: 61
        line 1801: 63
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       82     0  this   Ljava/nio/ByteBuffer;
           0       82     1  ob     Ljava/lang/Object;
          21       61     2  that   Ljava/nio/ByteBuffer;
          26       56     3  thisPos I
          34       48     4  thisRem I
          40       42     5  thatPos I
          49       33     6  thatRem I
      StackMapTable: number_of_entries = 6
        frame_type = 7 /* same */
        frame_type = 8 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 44
          locals = [class java/nio/ByteBuffer, class java/lang/Object, class java/nio/ByteBuffer, int, int, int, int]
          stack = []
        frame_type = 1 /* same */
        frame_type = 16 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
  
  public int compareTo(java.nio.ByteBuffer);
    descriptor: (Ljava/nio/ByteBuffer;)I
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=8, args_size=2
         0: aload_0                 
         1: invokevirtual #74                 // Method position:()I
         4: istore_2                
         5: aload_0                 
         6: invokevirtual #78                 // Method limit:()I
         9: iload_2                 
        10: isub                    
        11: istore_3                
        12: aload_1                 
        13: invokevirtual #74                 // Method position:()I
        16: istore        4                 
        18: aload_1                 
        19: invokevirtual #78                 // Method limit:()I
        22: iload         4                 
        24: isub                    
        25: istore        5                 
        27: iload_3                 
        28: iload         5                 
        30: invokestatic  #240                // Method java/lang/Math.min:(II)I
        33: istore        6                 
        35: iload         6                 
        37: ifge          42                
        40: iconst_m1               
        41: ireturn                 
        42: aload_0                 
        43: iload_2                 
        44: aload_1                 
        45: iload         4                 
        47: iload         6                 
        49: invokestatic  #234                // Method java/nio/BufferMismatch.mismatch:(Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)I
        52: istore        7                 
        54: iload         7                 
        56: iflt          80                
        59: aload_0                 
        60: iload_2                 
        61: iload         7                 
        63: iadd                    
        64: invokevirtual #131                // Method get:(I)B
        67: aload_1                 
        68: iload         4                 
        70: iload         7                 
        72: iadd                    
        73: invokevirtual #131                // Method get:(I)B
        76: invokestatic  #246                // Method compare:(BB)I
        79: ireturn                 
        80: iload_3                 
        81: iload         5                 
        83: isub                    
        84: ireturn                 
      LineNumberTable:
        line 1830: 0
        line 1831: 5
        line 1832: 12
        line 1833: 18
        line 1834: 27
        line 1835: 35
        line 1836: 40
        line 1837: 42
        line 1840: 54
        line 1841: 59
        line 1843: 80
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       85     0  this   Ljava/nio/ByteBuffer;
           0       85     1  that   Ljava/nio/ByteBuffer;
           5       80     2  thisPos I
          12       73     3  thisRem I
          18       67     4  thatPos I
          27       58     5  thatRem I
          35       50     6  length I
          54       31     7  i      I
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 42
          locals = [class java/nio/ByteBuffer, class java/nio/ByteBuffer, int, int, int, int, int]
          stack = []
        frame_type = 252 /* append */
          offset_delta = 37
          locals = [int]
  
  private static int compare(byte, byte);
    descriptor: (BB)I
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Code: 
      stack=2, locals=2, args_size=2
         0: iload_0                 
         1: iload_1                 
         2: invokestatic  #250                // Method java/lang/Byte.compare:(BB)I
         5: ireturn                 
      LineNumberTable:
        line 1853: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        6     0  x      B
           0        6     1  y      B
  
  public int mismatch(java.nio.ByteBuffer);
    descriptor: (Ljava/nio/ByteBuffer;)I
    flags: (0x0001) ACC_PUBLIC
    Code: 
      stack=5, locals=8, args_size=2
         0: aload_0                 
         1: invokevirtual #74                 // Method position:()I
         4: istore_2                
         5: aload_0                 
         6: invokevirtual #78                 // Method limit:()I
         9: iload_2                 
        10: isub                    
        11: istore_3                
        12: aload_1                 
        13: invokevirtual #74                 // Method position:()I
        16: istore        4                 
        18: aload_1                 
        19: invokevirtual #78                 // Method limit:()I
        22: iload         4                 
        24: isub                    
        25: istore        5                 
        27: iload_3                 
        28: iload         5                 
        30: invokestatic  #240                // Method java/lang/Math.min:(II)I
        33: istore        6                 
        35: iload         6                 
        37: ifge          42                
        40: iconst_m1               
        41: ireturn                 
        42: aload_0                 
        43: iload_2                 
        44: aload_1                 
        45: iload         4                 
        47: iload         6                 
        49: invokestatic  #234                // Method java/nio/BufferMismatch.mismatch:(Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)I
        52: istore        7                 
        54: iload         7                 
        56: iconst_m1               
        57: if_icmpne     71                
        60: iload_3                 
        61: iload         5                 
        63: if_icmpeq     71                
        66: iload         6                 
        68: goto          73                
        71: iload         7                 
        73: ireturn                 
      LineNumberTable:
        line 1882: 0
        line 1883: 5
        line 1884: 12
        line 1885: 18
        line 1886: 27
        line 1887: 35
        line 1888: 40
        line 1889: 42
        line 1892: 54
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       74     0  this   Ljava/nio/ByteBuffer;
           0       74     1  that   Ljava/nio/ByteBuffer;
           5       69     2  thisPos I
          12       62     3  thisRem I
          18       56     4  thatPos I
          27       47     5  thatRem I
          35       39     6  length I
          54       20     7  r      I
      StackMapTable: number_of_entries = 3
        frame_type = 255 /* full_frame */
          offset_delta = 42
          locals = [class java/nio/ByteBuffer, class java/nio/ByteBuffer, int, int, int, int, int]
          stack = []
        frame_type = 252 /* append */
          offset_delta = 28
          locals = [int]
        frame_type = 65 /* same_locals_1_stack_item */
          stack = [ int ]
  
  public final java.nio.ByteOrder order();
    descriptor: ()Ljava/nio/ByteOrder;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: getfield      #7                  // Field bigEndian:Z
         4: ifeq          13                
         7: getstatic     #19                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
        10: goto          16                
        13: getstatic     #253                // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
        16: areturn                 
      LineNumberTable:
        line 2170: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       17     0  this   Ljava/nio/ByteBuffer;
      StackMapTable: number_of_entries = 2
        frame_type = 13 /* same */
        frame_type = 66 /* same_locals_1_stack_item */
          stack = [ class java/nio/ByteOrder ]
  
  public final java.nio.ByteBuffer order(java.nio.ByteOrder);
    descriptor: (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=4, locals=2, args_size=2
         0: aload_0                 
         1: aload_1                 
         2: getstatic     #19                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
         5: if_acmpne     12                
         8: iconst_1                
         9: goto          13                
        12: iconst_0                
        13: putfield      #7                  // Field bigEndian:Z
        16: aload_0                 
        17: aload_0                 
        18: getfield      #7                  // Field bigEndian:Z
        21: invokestatic  #13                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
        24: getstatic     #19                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
        27: if_acmpne     34                
        30: iconst_1                
        31: goto          35                
        34: iconst_0                
        35: if_icmpne     42                
        38: iconst_1                
        39: goto          43                
        42: iconst_0                
        43: putfield      #23                 // Field nativeByteOrder:Z
        46: aload_0                 
        47: areturn                 
      LineNumberTable:
        line 2184: 0
        line 2185: 16
        line 2186: 21
        line 2187: 46
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       48     0  this   Ljava/nio/ByteBuffer;
           0       48     1  bo     Ljava/nio/ByteOrder;
      StackMapTable: number_of_entries = 6
        frame_type = 76 /* same_locals_1_stack_item */
          stack = [ class java/nio/ByteBuffer ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [class java/nio/ByteBuffer, class java/nio/ByteOrder]
          stack = [class java/nio/ByteBuffer, int]
        frame_type = 255 /* full_frame */
          offset_delta = 20
          locals = [class java/nio/ByteBuffer, class java/nio/ByteOrder]
          stack = [class java/nio/ByteBuffer, int]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [class java/nio/ByteBuffer, class java/nio/ByteOrder]
          stack = [class java/nio/ByteBuffer, int, int]
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class java/nio/ByteBuffer ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [class java/nio/ByteBuffer, class java/nio/ByteOrder]
          stack = [class java/nio/ByteBuffer, int]
  
  public final int alignmentOffset(int, int);
    descriptor: (II)I
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=4, locals=3, args_size=3
         0: iload_1                 
         1: ifge          32                
         4: new           #57                 // class java/lang/IllegalArgumentException
         7: dup                     
         8: new           #198                // class java/lang/StringBuilder
        11: dup                     
        12: invokespecial #200                // Method java/lang/StringBuilder."<init>":()V
        15: ldc_w         #256                // String Index less than zero: 
        18: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        21: iload_1                 
        22: invokevirtual #219                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        25: invokevirtual #231                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        28: invokespecial #258                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        31: athrow                  
        32: iload_2                 
        33: iconst_1                
        34: if_icmplt     45                
        37: iload_2                 
        38: iload_2                 
        39: iconst_1                
        40: isub                    
        41: iand                    
        42: ifeq          73                
        45: new           #57                 // class java/lang/IllegalArgumentException
        48: dup                     
        49: new           #198                // class java/lang/StringBuilder
        52: dup                     
        53: invokespecial #200                // Method java/lang/StringBuilder."<init>":()V
        56: ldc_w         #261                // String Unit size not a power of two: 
        59: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        62: iload_2                 
        63: invokevirtual #219                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        66: invokevirtual #231                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        69: invokespecial #258                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        72: athrow                  
        73: iload_2                 
        74: iconst_1                
        75: if_icmple     113               
        78: aload_0                 
        79: invokevirtual #155                // Method isDirect:()Z
        82: ifne          113               
        85: new           #174                // class java/lang/UnsupportedOperationException
        88: dup                     
        89: new           #198                // class java/lang/StringBuilder
        92: dup                     
        93: invokespecial #200                // Method java/lang/StringBuilder."<init>":()V
        96: ldc_w         #263                // String Unit size unsupported for non-direct buffers: 
        99: invokevirtual #213                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       102: iload_2                 
       103: invokevirtual #219                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
       106: invokevirtual #231                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       109: invokespecial #265                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       112: athrow                  
       113: aload_0                 
       114: getfield      #100                // Field address:J
       117: iload_1                 
       118: i2l                     
       119: ladd                    
       120: iload_2                 
       121: iconst_1                
       122: isub                    
       123: i2l                     
       124: land                    
       125: l2i                     
       126: ireturn                 
      LineNumberTable:
        line 2240: 0
        line 2241: 4
        line 2242: 32
        line 2243: 45
        line 2244: 73
        line 2245: 85
        line 2247: 113
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0      127     0  this   Ljava/nio/ByteBuffer;
           0      127     1  index  I
           0      127     2  unitSize I
      StackMapTable: number_of_entries = 4
        frame_type = 32 /* same */
        frame_type = 12 /* same */
        frame_type = 27 /* same */
        frame_type = 39 /* same */
  
  public final java.nio.ByteBuffer alignedSlice(int);
    descriptor: (I)Ljava/nio/ByteBuffer;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code: 
      stack=4, locals=8, args_size=2
         0: aload_0                 
         1: invokevirtual #74                 // Method position:()I
         4: istore_2                
         5: aload_0                 
         6: invokevirtual #78                 // Method limit:()I
         9: istore_3                
        10: aload_0                 
        11: iload_2                 
        12: iload_1                 
        13: invokevirtual #266                // Method alignmentOffset:(II)I
        16: istore        4                 
        18: aload_0                 
        19: iload_3                 
        20: iload_1                 
        21: invokevirtual #266                // Method alignmentOffset:(II)I
        24: istore        5                 
        26: iload         4                 
        28: ifle          40                
        31: iload_2                 
        32: iload_1                 
        33: iload         4                 
        35: isub                    
        36: iadd                    
        37: goto          41                
        40: iload_2                 
        41: istore        6                 
        43: iload_3                 
        44: iload         5                 
        46: isub                    
        47: istore        7                 
        49: iload         6                 
        51: iload_3                 
        52: if_icmpgt     61                
        55: iload         7                 
        57: iload_2                 
        58: if_icmpge     67                
        61: iload_2                 
        62: dup                     
        63: istore        7                 
        65: istore        6                 
        67: aload_0                 
        68: iload         6                 
        70: iload         7                 
        72: iload         6                 
        74: isub                    
        75: invokevirtual #269                // Method slice:(II)Ljava/nio/ByteBuffer;
        78: areturn                 
      LineNumberTable:
        line 2300: 0
        line 2301: 5
        line 2303: 10
        line 2304: 18
        line 2307: 26
        line 2308: 31
        line 2309: 40
        line 2312: 43
        line 2314: 49
        line 2315: 61
        line 2318: 67
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0       79     0  this   Ljava/nio/ByteBuffer;
           0       79     1  unitSize I
           5       74     2  pos    I
          10       69     3  lim    I
          18       61     4  pos_mod I
          26       53     5  lim_mod I
          43       36     6  aligned_pos I
          49       30     7  aligned_lim I
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 40
          locals = [class java/nio/ByteBuffer, int, int, int, int, int]
          stack = []
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 253 /* append */
          offset_delta = 19
          locals = [int, int]
        frame_type = 5 /* same */
  
  public abstract char getChar();
    descriptor: ()C
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putChar(char);
    descriptor: (C)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract char getChar(int);
    descriptor: (I)C
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putChar(int, char);
    descriptor: (IC)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.CharBuffer asCharBuffer();
    descriptor: ()Ljava/nio/CharBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract short getShort();
    descriptor: ()S
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putShort(short);
    descriptor: (S)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract short getShort(int);
    descriptor: (I)S
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putShort(int, short);
    descriptor: (IS)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ShortBuffer asShortBuffer();
    descriptor: ()Ljava/nio/ShortBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract int getInt();
    descriptor: ()I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putInt(int);
    descriptor: (I)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract int getInt(int);
    descriptor: (I)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putInt(int, int);
    descriptor: (II)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.IntBuffer asIntBuffer();
    descriptor: ()Ljava/nio/IntBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract long getLong();
    descriptor: ()J
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putLong(long);
    descriptor: (J)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract long getLong(int);
    descriptor: (I)J
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putLong(int, long);
    descriptor: (IJ)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.LongBuffer asLongBuffer();
    descriptor: ()Ljava/nio/LongBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract float getFloat();
    descriptor: ()F
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putFloat(float);
    descriptor: (F)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract float getFloat(int);
    descriptor: (I)F
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putFloat(int, float);
    descriptor: (IF)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.FloatBuffer asFloatBuffer();
    descriptor: ()Ljava/nio/FloatBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract double getDouble();
    descriptor: ()D
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putDouble(double);
    descriptor: (D)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract double getDouble(int);
    descriptor: (I)D
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.ByteBuffer putDouble(int, double);
    descriptor: (ID)Ljava/nio/ByteBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.nio.DoubleBuffer asDoubleBuffer();
    descriptor: ()Ljava/nio/DoubleBuffer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public java.nio.Buffer duplicate();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #273                // Method duplicate:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer slice(int, int);
    descriptor: (II)Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=3, locals=3, args_size=3
         0: aload_0                 
         1: iload_1                 
         2: iload_2                 
         3: invokevirtual #269                // Method slice:(II)Ljava/nio/ByteBuffer;
         6: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        7     0  this   Ljava/nio/ByteBuffer;
    MethodParameters:
      Name                             Flags
      <no name>                        synthetic 
      <no name>                        synthetic 
  
  public java.nio.Buffer slice();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #277                // Method slice:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.lang.Object array();
    descriptor: ()Ljava/lang/Object;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #279                // Method array:()[B
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer rewind();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #283                // Method rewind:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer flip();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #285                // Method flip:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer clear();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #287                // Method clear:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer reset();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #289                // Method reset:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer mark();
    descriptor: ()Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=1, locals=1, args_size=1
         0: aload_0                 
         1: invokevirtual #291                // Method mark:()Ljava/nio/ByteBuffer;
         4: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        5     0  this   Ljava/nio/ByteBuffer;
  
  public java.nio.Buffer limit(int);
    descriptor: (I)Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=2, locals=2, args_size=2
         0: aload_0                 
         1: iload_1                 
         2: invokevirtual #293                // Method limit:(I)Ljava/nio/ByteBuffer;
         5: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        6     0  this   Ljava/nio/ByteBuffer;
    MethodParameters:
      Name                             Flags
      <no name>                        synthetic 
  
  public java.nio.Buffer position(int);
    descriptor: (I)Ljava/nio/Buffer;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=2, locals=2, args_size=2
         0: aload_0                 
         1: iload_1                 
         2: invokevirtual #88                 // Method position:(I)Ljava/nio/ByteBuffer;
         5: areturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        6     0  this   Ljava/nio/ByteBuffer;
    MethodParameters:
      Name                             Flags
      <no name>                        synthetic 
  
  public int compareTo(java.lang.Object);
    descriptor: (Ljava/lang/Object;)I
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code: 
      stack=2, locals=2, args_size=2
         0: aload_0                 
         1: aload_1                 
         2: checkcast     #8                  // class java/nio/ByteBuffer
         5: invokevirtual #295                // Method compareTo:(Ljava/nio/ByteBuffer;)I
         8: ireturn                 
      LineNumberTable:
        line 292: 0
      LocalVariableTable:
       Start   Length  Slot  Name   Signature
           0        9     0  this   Ljava/nio/ByteBuffer;
    MethodParameters:
      Name                             Flags
      <no name>                        synthetic 
  
  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code: 
      stack=2, locals=0, args_size=0
         0: ldc           #8                  // class java/nio/ByteBuffer
         2: invokevirtual #299                // Method java/lang/Class.desiredAssertionStatus:()Z
         5: ifne          12                
         8: iconst_1                
         9: goto          13                
        12: iconst_0                
        13: putstatic     #152                // Field $assertionsDisabled:Z
        16: getstatic     #302                // Field UNSAFE:Ljdk/internal/misc/Unsafe;
        19: ldc_w         #306                // class "[B"
        22: invokevirtual #307                // Method jdk/internal/misc/Unsafe.arrayBaseOffset:(Ljava/lang/Class;)I
        25: i2l                     
        26: putstatic     #104                // Field ARRAY_BASE_OFFSET:J
        29: return                  
      LineNumberTable:
        line 292: 0
        line 307: 16
      StackMapTable: number_of_entries = 2
        frame_type = 12 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
}
Signature: #440                        // Ljava/nio/Buffer;Ljava/lang/Comparable<Ljava/nio/ByteBuffer;>;
SourceFile: "ByteBuffer.java"
PermittedSubclasses:
  java/nio/HeapByteBuffer
  java/nio/MappedByteBuffer
