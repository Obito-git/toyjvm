---
source: class_file/src/lib.rs
expression: display
---
public interface jdk.internal.access.JavaLangAccess 
  minor version: 0
  major version: 68
  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT
  this_class: #1                       //jdk/internal/access/JavaLangAccess
  super_class: #3                      //java/lang/Object
  interfaces: 0, fields: 0, methods: 93, attributes: 2
Constant pool:
    #1 = Class              #2               // jdk/internal/access/JavaLangAccess
    #2 = Utf8               jdk/internal/access/JavaLangAccess
    #3 = Class              #4               // java/lang/Object
    #4 = Utf8               java/lang/Object
    #5 = Utf8               getDeclaredPublicMethods
    #6 = Utf8               (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/util/List;
    #7 = Utf8               Signature
    #8 = Utf8               (Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Class<*>;)Ljava/util/List<Ljava/lang/reflect/Method;>;
    #9 = Utf8               findMethod
   #10 = Utf8               (Ljava/lang/Class;ZLjava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
   #11 = Utf8               (Ljava/lang/Class<*>;ZLjava/lang/String;[Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;
   #12 = Utf8               getConstantPool
   #13 = Utf8               (Ljava/lang/Class;)Ljdk/internal/reflect/ConstantPool;
   #14 = Utf8               (Ljava/lang/Class<*>;)Ljdk/internal/reflect/ConstantPool;
   #15 = Utf8               casAnnotationType
   #16 = Utf8               (Ljava/lang/Class;Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z
   #17 = Utf8               (Ljava/lang/Class<*>;Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z
   #18 = Utf8               getAnnotationType
   #19 = Utf8               (Ljava/lang/Class;)Lsun/reflect/annotation/AnnotationType;
   #20 = Utf8               (Ljava/lang/Class<*>;)Lsun/reflect/annotation/AnnotationType;
   #21 = Utf8               getDeclaredAnnotationMap
   #22 = Utf8               (Ljava/lang/Class;)Ljava/util/Map;
   #23 = Utf8               (Ljava/lang/Class<*>;)Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/lang/annotation/Annotation;>;
   #24 = Utf8               getRawClassAnnotations
   #25 = Utf8               (Ljava/lang/Class;)[B
   #26 = Utf8               (Ljava/lang/Class<*>;)[B
   #27 = Utf8               getRawClassTypeAnnotations
   #28 = Utf8               getRawExecutableTypeAnnotations
   #29 = Utf8               (Ljava/lang/reflect/Executable;)[B
   #30 = Utf8               getEnumConstantsShared
   #31 = Utf8               (Ljava/lang/Class;)[Ljava/lang/Enum;
   #32 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;)[TE;
   #33 = Utf8               blockedOn
   #34 = Utf8               (Lsun/nio/ch/Interruptible;)V
   #35 = Utf8               registerShutdownHook
   #36 = Utf8               (IZLjava/lang/Runnable;)V
   #37 = Utf8               invokeFinalize
   #38 = Utf8               (Ljava/lang/Object;)V
   #39 = Utf8               Exceptions
   #40 = Class              #41              // java/lang/Throwable
   #41 = Utf8               java/lang/Throwable
   #42 = Utf8               createOrGetClassLoaderValueMap
   #43 = Utf8               (Ljava/lang/ClassLoader;)Ljava/util/concurrent/ConcurrentHashMap;
   #44 = Utf8               (Ljava/lang/ClassLoader;)Ljava/util/concurrent/ConcurrentHashMap<**>;
   #45 = Utf8               defineClass
   #46 = Utf8               (Ljava/lang/ClassLoader;Ljava/lang/String;[BLjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;
   #47 = Utf8               (Ljava/lang/ClassLoader;Ljava/lang/String;[BLjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class<*>;
   #48 = Utf8               (Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;
   #49 = Utf8               (Ljava/lang/ClassLoader;Ljava/lang/Class<*>;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class<*>;
   #50 = Utf8               findBootstrapClassOrNull
   #51 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;
   #52 = Utf8               (Ljava/lang/String;)Ljava/lang/Class<*>;
   #53 = Utf8               definePackage
   #54 = Utf8               (Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/Package;
   #55 = Utf8               defineModule
   #56 = Utf8               (Ljava/lang/ClassLoader;Ljava/lang/module/ModuleDescriptor;Ljava/net/URI;)Ljava/lang/Module;
   #57 = Utf8               defineUnnamedModule
   #58 = Utf8               (Ljava/lang/ClassLoader;)Ljava/lang/Module;
   #59 = Utf8               addReads
   #60 = Utf8               (Ljava/lang/Module;Ljava/lang/Module;)V
   #61 = Utf8               addReadsAllUnnamed
   #62 = Utf8               (Ljava/lang/Module;)V
   #63 = Utf8               addExports
   #64 = Utf8               (Ljava/lang/Module;Ljava/lang/String;)V
   #65 = Utf8               (Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)V
   #66 = Utf8               addExportsToAllUnnamed
   #67 = Utf8               addOpens
   #68 = Utf8               addOpensToAllUnnamed
   #69 = Utf8               (Ljava/lang/Module;Ljava/util/Set;Ljava/util/Set;)V
   #70 = Utf8               (Ljava/lang/Module;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;)V
   #71 = Utf8               addUses
   #72 = Utf8               (Ljava/lang/Module;Ljava/lang/Class;)V
   #73 = Utf8               (Ljava/lang/Module;Ljava/lang/Class<*>;)V
   #74 = Utf8               isReflectivelyExported
   #75 = Utf8               (Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)Z
   #76 = Utf8               isReflectivelyOpened
   #77 = Utf8               addEnableNativeAccess
   #78 = Utf8               (Ljava/lang/Module;)Ljava/lang/Module;
   #79 = Utf8               (Ljava/lang/ModuleLayer;Ljava/lang/String;)Z
   #80 = Utf8               addEnableNativeAccessToAllUnnamed
   #81 = Utf8               ()V
   #82 = Utf8               ensureNativeAccess
   #83 = Utf8               (Ljava/lang/Module;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;Z)V
   #84 = Utf8               (Ljava/lang/Module;Ljava/lang/Class<*>;Ljava/lang/String;Ljava/lang/Class<*>;Z)V
   #85 = Utf8               getServicesCatalog
   #86 = Utf8               (Ljava/lang/ModuleLayer;)Ljdk/internal/module/ServicesCatalog;
   #87 = Utf8               bindToLoader
   #88 = Utf8               (Ljava/lang/ModuleLayer;Ljava/lang/ClassLoader;)V
   #89 = Utf8               layers
   #90 = Utf8               (Ljava/lang/ModuleLayer;)Ljava/util/stream/Stream;
   #91 = Utf8               (Ljava/lang/ModuleLayer;)Ljava/util/stream/Stream<Ljava/lang/ModuleLayer;>;
   #92 = Utf8               (Ljava/lang/ClassLoader;)Ljava/util/stream/Stream;
   #93 = Utf8               (Ljava/lang/ClassLoader;)Ljava/util/stream/Stream<Ljava/lang/ModuleLayer;>;
   #94 = Utf8               countPositives
   #95 = Utf8               ([BII)I
   #96 = Utf8               countNonZeroAscii
   #97 = Utf8               (Ljava/lang/String;)I
   #98 = Utf8               newStringNoRepl
   #99 = Utf8               ([BLjava/nio/charset/Charset;)Ljava/lang/String;
  #100 = Class              #101             // java/nio/charset/CharacterCodingException
  #101 = Utf8               java/nio/charset/CharacterCodingException
  #102 = Utf8               getBytesNoRepl
  #103 = Utf8               (Ljava/lang/String;Ljava/nio/charset/Charset;)[B
  #104 = Utf8               newStringUTF8NoRepl
  #105 = Utf8               ([BII)Ljava/lang/String;
  #106 = Utf8               getUTF16Char
  #107 = Utf8               ([BI)C
  #108 = Utf8               putCharUTF16
  #109 = Utf8               ([BII)V
  #110 = Utf8               getBytesUTF8NoRepl
  #111 = Utf8               (Ljava/lang/String;)[B
  #112 = Utf8               inflateBytesToChars
  #113 = Utf8               ([BI[CII)V
  #114 = Utf8               decodeASCII
  #115 = Utf8               ([BI[CII)I
  #116 = Utf8               initialSystemIn
  #117 = Utf8               ()Ljava/io/InputStream;
  #118 = Utf8               initialSystemErr
  #119 = Utf8               ()Ljava/io/PrintStream;
  #120 = Utf8               encodeASCII
  #121 = Utf8               ([CI[BII)I
  #122 = Utf8               setCause
  #123 = Utf8               (Ljava/lang/Throwable;Ljava/lang/Throwable;)V
  #124 = Utf8               protectionDomain
  #125 = Utf8               (Ljava/lang/Class;)Ljava/security/ProtectionDomain;
  #126 = Utf8               (Ljava/lang/Class<*>;)Ljava/security/ProtectionDomain;
  #127 = Utf8               stringConcatHelper
  #128 = Utf8               (Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;
  #129 = Utf8               stringConcatInitialCoder
  #130 = Utf8               ()J
  #131 = Utf8               stringConcatMix
  #132 = Utf8               (JLjava/lang/String;)J
  #133 = Utf8               (JC)J
  #134 = Utf8               stringConcat1
  #135 = Utf8               ([Ljava/lang/String;)Ljava/lang/Object;
  #136 = Utf8               stringInitCoder
  #137 = Utf8               ()B
  #138 = Utf8               stringCoder
  #139 = Utf8               (Ljava/lang/String;)B
  #140 = Utf8               join
  #141 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;
  #142 = Utf8               concat
  #143 = Utf8               (Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
  #144 = Utf8               classData
  #145 = Utf8               (Ljava/lang/Class;)Ljava/lang/Object;
  #146 = Utf8               (Ljava/lang/Class<*>;)Ljava/lang/Object;
  #147 = Utf8               getCharsLatin1
  #148 = Utf8               (JI[B)I
  #149 = Utf8               getCharsUTF16
  #150 = Utf8               nativeLibrariesFor
  #151 = Utf8               (Ljava/lang/ClassLoader;)Ljdk/internal/loader/NativeLibraries;
  #152 = Utf8               exit
  #153 = Utf8               (I)V
  #154 = Utf8               getAllThreads
  #155 = Utf8               ()[Ljava/lang/Thread;
  #156 = Utf8               threadContainer
  #157 = Utf8               (Ljava/lang/Thread;)Ljdk/internal/vm/ThreadContainer;
  #158 = Utf8               start
  #159 = Utf8               (Ljava/lang/Thread;Ljdk/internal/vm/ThreadContainer;)V
  #160 = Utf8               headStackableScope
  #161 = Utf8               (Ljava/lang/Thread;)Ljdk/internal/vm/StackableScope;
  #162 = Utf8               setHeadStackableScope
  #163 = Utf8               (Ljdk/internal/vm/StackableScope;)V
  #164 = Utf8               currentCarrierThread
  #165 = Utf8               ()Ljava/lang/Thread;
  #166 = Utf8               getCarrierThreadLocal
  #167 = Utf8               (Ljdk/internal/misc/CarrierThreadLocal;)Ljava/lang/Object;
  #168 = Utf8               <T:Ljava/lang/Object;>(Ljdk/internal/misc/CarrierThreadLocal<TT;>;)TT;
  #169 = Utf8               setCarrierThreadLocal
  #170 = Utf8               (Ljdk/internal/misc/CarrierThreadLocal;Ljava/lang/Object;)V
  #171 = Utf8               <T:Ljava/lang/Object;>(Ljdk/internal/misc/CarrierThreadLocal<TT;>;TT;)V
  #172 = Utf8               removeCarrierThreadLocal
  #173 = Utf8               (Ljdk/internal/misc/CarrierThreadLocal;)V
  #174 = Utf8               (Ljdk/internal/misc/CarrierThreadLocal<*>;)V
  #175 = Utf8               isCarrierThreadLocalPresent
  #176 = Utf8               (Ljdk/internal/misc/CarrierThreadLocal;)Z
  #177 = Utf8               (Ljdk/internal/misc/CarrierThreadLocal<*>;)Z
  #178 = Utf8               scopedValueCache
  #179 = Utf8               ()[Ljava/lang/Object;
  #180 = Utf8               setScopedValueCache
  #181 = Utf8               ([Ljava/lang/Object;)V
  #182 = Utf8               scopedValueBindings
  #183 = Utf8               ()Ljava/lang/Object;
  #184 = Utf8               getContinuation
  #185 = Utf8               (Ljava/lang/Thread;)Ljdk/internal/vm/Continuation;
  #186 = Utf8               setContinuation
  #187 = Utf8               (Ljava/lang/Thread;Ljdk/internal/vm/Continuation;)V
  #188 = Utf8               virtualThreadContinuationScope
  #189 = Utf8               ()Ljdk/internal/vm/ContinuationScope;
  #190 = Utf8               parkVirtualThread
  #191 = Utf8               (J)V
  #192 = Utf8               unparkVirtualThread
  #193 = Utf8               (Ljava/lang/Thread;)V
  #194 = Utf8               virtualThreadDefaultScheduler
  #195 = Utf8               ()Ljava/util/concurrent/Executor;
  #196 = Utf8               virtualThreadDelayedTaskSchedulers
  #197 = Utf8               ()Ljava/util/stream/Stream;
  #198 = Utf8               ()Ljava/util/stream/Stream<Ljava/util/concurrent/ScheduledExecutorService;>;
  #199 = Utf8               newStackWalkerInstance
  #200 = Utf8               (Ljava/util/Set;Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Ljava/lang/StackWalker;
  #201 = Utf8               (Ljava/util/Set<Ljava/lang/StackWalker$Option;>;Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Ljava/lang/StackWalker;
  #202 = Utf8               getLoaderNameID
  #203 = Utf8               (Ljava/lang/ClassLoader;)Ljava/lang/String;
  #204 = Utf8               copyToSegmentRaw
  #205 = Utf8               (Ljava/lang/String;Ljava/lang/foreign/MemorySegment;J)V
  #206 = Utf8               bytesCompatible
  #207 = Utf8               (Ljava/lang/String;Ljava/nio/charset/Charset;)Z
  #208 = Utf8               SourceFile
  #209 = Utf8               JavaLangAccess.java
  #210 = Utf8               InnerClasses
  #211 = Class              #212             // java/lang/StackWalker$Option
  #212 = Utf8               java/lang/StackWalker$Option
  #213 = Class              #214             // java/lang/StackWalker
  #214 = Utf8               java/lang/StackWalker
  #215 = Utf8               Option
{
  public abstract java.util.List<java.lang.reflect.Method> getDeclaredPublicMethods(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...);
    descriptor: (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/util/List;
    flags: (0x0481) ACC_PUBLIC, ACC_VARARGS, ACC_ABSTRACT
    Signature: #8                          // (Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Class<*>;)Ljava/util/List<Ljava/lang/reflect/Method;>;
  
  public abstract java.lang.reflect.Method findMethod(java.lang.Class<?>, boolean, java.lang.String, java.lang.Class<?>...);
    descriptor: (Ljava/lang/Class;ZLjava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    flags: (0x0481) ACC_PUBLIC, ACC_VARARGS, ACC_ABSTRACT
    Signature: #11                         // (Ljava/lang/Class<*>;ZLjava/lang/String;[Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;
  
  public abstract jdk.internal.reflect.ConstantPool getConstantPool(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)Ljdk/internal/reflect/ConstantPool;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #14                         // (Ljava/lang/Class<*>;)Ljdk/internal/reflect/ConstantPool;
  
  public abstract boolean casAnnotationType(java.lang.Class<?>, sun.reflect.annotation.AnnotationType, sun.reflect.annotation.AnnotationType);
    descriptor: (Ljava/lang/Class;Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #17                         // (Ljava/lang/Class<*>;Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z
  
  public abstract sun.reflect.annotation.AnnotationType getAnnotationType(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)Lsun/reflect/annotation/AnnotationType;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #20                         // (Ljava/lang/Class<*>;)Lsun/reflect/annotation/AnnotationType;
  
  public abstract java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.annotation.Annotation> getDeclaredAnnotationMap(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)Ljava/util/Map;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #23                         // (Ljava/lang/Class<*>;)Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/lang/annotation/Annotation;>;
  
  public abstract byte[] getRawClassAnnotations(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)[B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #26                         // (Ljava/lang/Class<*>;)[B
  
  public abstract byte[] getRawClassTypeAnnotations(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)[B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #26                         // (Ljava/lang/Class<*>;)[B
  
  public abstract byte[] getRawExecutableTypeAnnotations(java.lang.reflect.Executable);
    descriptor: (Ljava/lang/reflect/Executable;)[B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract <E extends java.lang.Enum<E>> E[] getEnumConstantsShared(java.lang.Class<E>);
    descriptor: (Ljava/lang/Class;)[Ljava/lang/Enum;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #32                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;)[TE;
  
  public abstract void blockedOn(sun.nio.ch.Interruptible);
    descriptor: (Lsun/nio/ch/Interruptible;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void registerShutdownHook(int, boolean, java.lang.Runnable);
    descriptor: (IZLjava/lang/Runnable;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void invokeFinalize(java.lang.Object) throws java.lang.Throwable;
    descriptor: (Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Exceptions:
      throws java.lang.Throwable
  
  public abstract java.util.concurrent.ConcurrentHashMap<?, ?> createOrGetClassLoaderValueMap(java.lang.ClassLoader);
    descriptor: (Ljava/lang/ClassLoader;)Ljava/util/concurrent/ConcurrentHashMap;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #44                         // (Ljava/lang/ClassLoader;)Ljava/util/concurrent/ConcurrentHashMap<**>;
  
  public abstract java.lang.Class<?> defineClass(java.lang.ClassLoader, java.lang.String, byte[], java.security.ProtectionDomain, java.lang.String);
    descriptor: (Ljava/lang/ClassLoader;Ljava/lang/String;[BLjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #47                         // (Ljava/lang/ClassLoader;Ljava/lang/String;[BLjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class<*>;
  
  public abstract java.lang.Class<?> defineClass(java.lang.ClassLoader, java.lang.Class<?>, java.lang.String, byte[], java.security.ProtectionDomain, boolean, int, java.lang.Object);
    descriptor: (Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #49                         // (Ljava/lang/ClassLoader;Ljava/lang/Class<*>;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class<*>;
  
  public abstract java.lang.Class<?> findBootstrapClassOrNull(java.lang.String);
    descriptor: (Ljava/lang/String;)Ljava/lang/Class;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #52                         // (Ljava/lang/String;)Ljava/lang/Class<*>;
  
  public abstract java.lang.Package definePackage(java.lang.ClassLoader, java.lang.String, java.lang.Module);
    descriptor: (Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/Package;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Module defineModule(java.lang.ClassLoader, java.lang.module.ModuleDescriptor, java.net.URI);
    descriptor: (Ljava/lang/ClassLoader;Ljava/lang/module/ModuleDescriptor;Ljava/net/URI;)Ljava/lang/Module;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Module defineUnnamedModule(java.lang.ClassLoader);
    descriptor: (Ljava/lang/ClassLoader;)Ljava/lang/Module;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addReads(java.lang.Module, java.lang.Module);
    descriptor: (Ljava/lang/Module;Ljava/lang/Module;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addReadsAllUnnamed(java.lang.Module);
    descriptor: (Ljava/lang/Module;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addExports(java.lang.Module, java.lang.String);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addExports(java.lang.Module, java.lang.String, java.lang.Module);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addExportsToAllUnnamed(java.lang.Module, java.lang.String);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addOpens(java.lang.Module, java.lang.String, java.lang.Module);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addOpensToAllUnnamed(java.lang.Module, java.lang.String);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addOpensToAllUnnamed(java.lang.Module, java.util.Set<java.lang.String>, java.util.Set<java.lang.String>);
    descriptor: (Ljava/lang/Module;Ljava/util/Set;Ljava/util/Set;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #70                         // (Ljava/lang/Module;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;)V
  
  public abstract void addUses(java.lang.Module, java.lang.Class<?>);
    descriptor: (Ljava/lang/Module;Ljava/lang/Class;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #73                         // (Ljava/lang/Module;Ljava/lang/Class<*>;)V
  
  public abstract boolean isReflectivelyExported(java.lang.Module, java.lang.String, java.lang.Module);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract boolean isReflectivelyOpened(java.lang.Module, java.lang.String, java.lang.Module);
    descriptor: (Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Module addEnableNativeAccess(java.lang.Module);
    descriptor: (Ljava/lang/Module;)Ljava/lang/Module;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract boolean addEnableNativeAccess(java.lang.ModuleLayer, java.lang.String);
    descriptor: (Ljava/lang/ModuleLayer;Ljava/lang/String;)Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void addEnableNativeAccessToAllUnnamed();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void ensureNativeAccess(java.lang.Module, java.lang.Class<?>, java.lang.String, java.lang.Class<?>, boolean);
    descriptor: (Ljava/lang/Module;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;Z)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #84                         // (Ljava/lang/Module;Ljava/lang/Class<*>;Ljava/lang/String;Ljava/lang/Class<*>;Z)V
  
  public abstract jdk.internal.module.ServicesCatalog getServicesCatalog(java.lang.ModuleLayer);
    descriptor: (Ljava/lang/ModuleLayer;)Ljdk/internal/module/ServicesCatalog;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void bindToLoader(java.lang.ModuleLayer, java.lang.ClassLoader);
    descriptor: (Ljava/lang/ModuleLayer;Ljava/lang/ClassLoader;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.util.stream.Stream<java.lang.ModuleLayer> layers(java.lang.ModuleLayer);
    descriptor: (Ljava/lang/ModuleLayer;)Ljava/util/stream/Stream;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #91                         // (Ljava/lang/ModuleLayer;)Ljava/util/stream/Stream<Ljava/lang/ModuleLayer;>;
  
  public abstract java.util.stream.Stream<java.lang.ModuleLayer> layers(java.lang.ClassLoader);
    descriptor: (Ljava/lang/ClassLoader;)Ljava/util/stream/Stream;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #93                         // (Ljava/lang/ClassLoader;)Ljava/util/stream/Stream<Ljava/lang/ModuleLayer;>;
  
  public abstract int countPositives(byte[], int, int);
    descriptor: ([BII)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract int countNonZeroAscii(java.lang.String);
    descriptor: (Ljava/lang/String;)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.String newStringNoRepl(byte[], java.nio.charset.Charset) throws java.nio.charset.CharacterCodingException;
    descriptor: ([BLjava/nio/charset/Charset;)Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Exceptions:
      throws java.nio.charset.CharacterCodingException
  
  public abstract byte[] getBytesNoRepl(java.lang.String, java.nio.charset.Charset) throws java.nio.charset.CharacterCodingException;
    descriptor: (Ljava/lang/String;Ljava/nio/charset/Charset;)[B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Exceptions:
      throws java.nio.charset.CharacterCodingException
  
  public abstract java.lang.String newStringUTF8NoRepl(byte[], int, int);
    descriptor: ([BII)Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract char getUTF16Char(byte[], int);
    descriptor: ([BI)C
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void putCharUTF16(byte[], int, int);
    descriptor: ([BII)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract byte[] getBytesUTF8NoRepl(java.lang.String);
    descriptor: (Ljava/lang/String;)[B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void inflateBytesToChars(byte[], int, char[], int, int);
    descriptor: ([BI[CII)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract int decodeASCII(byte[], int, char[], int, int);
    descriptor: ([BI[CII)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.io.InputStream initialSystemIn();
    descriptor: ()Ljava/io/InputStream;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.io.PrintStream initialSystemErr();
    descriptor: ()Ljava/io/PrintStream;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract int encodeASCII(char[], int, byte[], int, int);
    descriptor: ([CI[BII)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void setCause(java.lang.Throwable, java.lang.Throwable);
    descriptor: (Ljava/lang/Throwable;Ljava/lang/Throwable;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.security.ProtectionDomain protectionDomain(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)Ljava/security/ProtectionDomain;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #126                        // (Ljava/lang/Class<*>;)Ljava/security/ProtectionDomain;
  
  public abstract java.lang.invoke.MethodHandle stringConcatHelper(java.lang.String, java.lang.invoke.MethodType);
    descriptor: (Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract long stringConcatInitialCoder();
    descriptor: ()J
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract long stringConcatMix(long, java.lang.String);
    descriptor: (JLjava/lang/String;)J
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract long stringConcatMix(long, char);
    descriptor: (JC)J
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Object stringConcat1(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)Ljava/lang/Object;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract byte stringInitCoder();
    descriptor: ()B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract byte stringCoder(java.lang.String);
    descriptor: (Ljava/lang/String;)B
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.String join(java.lang.String, java.lang.String, java.lang.String, java.lang.String[], int);
    descriptor: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.String concat(java.lang.String, java.lang.Object, java.lang.String);
    descriptor: (Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Object classData(java.lang.Class<?>);
    descriptor: (Ljava/lang/Class;)Ljava/lang/Object;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #146                        // (Ljava/lang/Class<*>;)Ljava/lang/Object;
  
  public abstract int getCharsLatin1(long, int, byte[]);
    descriptor: (JI[B)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract int getCharsUTF16(long, int, byte[]);
    descriptor: (JI[B)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract jdk.internal.loader.NativeLibraries nativeLibrariesFor(java.lang.ClassLoader);
    descriptor: (Ljava/lang/ClassLoader;)Ljdk/internal/loader/NativeLibraries;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void exit(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Thread[] getAllThreads();
    descriptor: ()[Ljava/lang/Thread;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract jdk.internal.vm.ThreadContainer threadContainer(java.lang.Thread);
    descriptor: (Ljava/lang/Thread;)Ljdk/internal/vm/ThreadContainer;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void start(java.lang.Thread, jdk.internal.vm.ThreadContainer);
    descriptor: (Ljava/lang/Thread;Ljdk/internal/vm/ThreadContainer;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract jdk.internal.vm.StackableScope headStackableScope(java.lang.Thread);
    descriptor: (Ljava/lang/Thread;)Ljdk/internal/vm/StackableScope;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void setHeadStackableScope(jdk.internal.vm.StackableScope);
    descriptor: (Ljdk/internal/vm/StackableScope;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Thread currentCarrierThread();
    descriptor: ()Ljava/lang/Thread;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract <T extends java.lang.Object> T getCarrierThreadLocal(jdk.internal.misc.CarrierThreadLocal<T>);
    descriptor: (Ljdk/internal/misc/CarrierThreadLocal;)Ljava/lang/Object;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #168                        // <T:Ljava/lang/Object;>(Ljdk/internal/misc/CarrierThreadLocal<TT;>;)TT;
  
  public abstract <T extends java.lang.Object> void setCarrierThreadLocal(jdk.internal.misc.CarrierThreadLocal<T>, T);
    descriptor: (Ljdk/internal/misc/CarrierThreadLocal;Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #171                        // <T:Ljava/lang/Object;>(Ljdk/internal/misc/CarrierThreadLocal<TT;>;TT;)V
  
  public abstract void removeCarrierThreadLocal(jdk.internal.misc.CarrierThreadLocal<?>);
    descriptor: (Ljdk/internal/misc/CarrierThreadLocal;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #174                        // (Ljdk/internal/misc/CarrierThreadLocal<*>;)V
  
  public abstract boolean isCarrierThreadLocalPresent(jdk.internal.misc.CarrierThreadLocal<?>);
    descriptor: (Ljdk/internal/misc/CarrierThreadLocal;)Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #177                        // (Ljdk/internal/misc/CarrierThreadLocal<*>;)Z
  
  public abstract java.lang.Object[] scopedValueCache();
    descriptor: ()[Ljava/lang/Object;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void setScopedValueCache(java.lang.Object[]);
    descriptor: ([Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.lang.Object scopedValueBindings();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract jdk.internal.vm.Continuation getContinuation(java.lang.Thread);
    descriptor: (Ljava/lang/Thread;)Ljdk/internal/vm/Continuation;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void setContinuation(java.lang.Thread, jdk.internal.vm.Continuation);
    descriptor: (Ljava/lang/Thread;Ljdk/internal/vm/Continuation;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract jdk.internal.vm.ContinuationScope virtualThreadContinuationScope();
    descriptor: ()Ljdk/internal/vm/ContinuationScope;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void parkVirtualThread();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void parkVirtualThread(long);
    descriptor: (J)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void unparkVirtualThread(java.lang.Thread);
    descriptor: (Ljava/lang/Thread;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.util.concurrent.Executor virtualThreadDefaultScheduler();
    descriptor: ()Ljava/util/concurrent/Executor;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract java.util.stream.Stream<java.util.concurrent.ScheduledExecutorService> virtualThreadDelayedTaskSchedulers();
    descriptor: ()Ljava/util/stream/Stream;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #198                        // ()Ljava/util/stream/Stream<Ljava/util/concurrent/ScheduledExecutorService;>;
  
  public abstract java.lang.StackWalker newStackWalkerInstance(java.util.Set<java.lang.StackWalker$Option>, jdk.internal.vm.ContinuationScope, jdk.internal.vm.Continuation);
    descriptor: (Ljava/util/Set;Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Ljava/lang/StackWalker;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #201                        // (Ljava/util/Set<Ljava/lang/StackWalker$Option;>;Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Ljava/lang/StackWalker;
  
  public abstract java.lang.String getLoaderNameID(java.lang.ClassLoader);
    descriptor: (Ljava/lang/ClassLoader;)Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract void copyToSegmentRaw(java.lang.String, java.lang.foreign.MemorySegment, long);
    descriptor: (Ljava/lang/String;Ljava/lang/foreign/MemorySegment;J)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
  
  public abstract boolean bytesCompatible(java.lang.String, java.nio.charset.Charset);
    descriptor: (Ljava/lang/String;Ljava/nio/charset/Charset;)Z
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
}
SourceFile: "JavaLangAccess.java"
InnerClasses:
  public static final #215= #211 of #213;     // Option=class java/lang/StackWalker$Option of class java/lang/StackWalker
