use crate::InstructionErr;
use crate::utils::cursor::ByteCursor;
use num_enum::TryFromPrimitive;
use std::fmt::Formatter;

/// https://docs.oracle.com/javase/specs/jvms/se24/html/jvms-6.html#jvms-6.5.lookupswitch
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct LookupSwitchData {
    pub padding: u8,
    pub default_offset: i32,
    pub pairs: Vec<(i32, i32)>,
}

/// https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-6.html#jvms-6.5.tableswitch
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct TableSwitchData {
    pub padding: u8,
    pub default_offset: i32,
    pub low: i32,
    pub high: i32,
    pub offsets: Vec<i32>,
}

/// https://docs.oracle.com/javase/specs/jvms/se24/html/jvms-6.html#jvms-6.5.newarray
/// Table 6.5-A. Newarray type codes
#[derive(Debug, Clone, Copy, PartialEq, Eq, TryFromPrimitive)]
#[repr(u8)]
pub enum ArrayType {
    Boolean = 4,
    Char = 5,
    Float = 6,
    Double = 7,
    Byte = 8,
    Short = 9,
    Int = 10,
    Long = 11,
}

/// https://docs.oracle.com/javase/specs/jvms/se24/html/jvms-6.html
#[derive(Debug, Clone, Copy, PartialEq, Eq, TryFromPrimitive)]
#[repr(u8)]
pub enum Opcode {
    Aaload = 0x32,
    Aastore = 0x53,
    AconstNull = 0x01,
    Aload = 0x19,
    Aload0 = 0x2A,
    Aload1 = 0x2B,
    Aload2 = 0x2C,
    Aload3 = 0x2D,
    Anewarray = 0xBD,
    Areturn = 0xB0,
    ArrayLength = 0xBE,
    Astore = 0x3A,
    Astore0 = 0x4B,
    Astore1 = 0x4C,
    Astore2 = 0x4D,
    Astore3 = 0x4E,
    Athrow = 0xBF,
    Baload = 0x33,
    Bastore = 0x54,
    Bipush = 0x10,
    Breakpoint = 0xCA,
    Caload = 0x34,
    Castore = 0x55,
    Checkcast = 0xC0,
    D2f = 0x90,
    D2i = 0x8E,
    D2l = 0x8F,
    Dadd = 0x63,
    Daload = 0x31,
    Dastore = 0x52,
    Dcmpg = 0x98,
    Dcmpl = 0x97,
    Dconst0 = 0x0E,
    Dconst1 = 0x0F,
    Ddiv = 0x6F,
    Dload = 0x18,
    Dload0 = 0x26,
    Dload1 = 0x27,
    Dload2 = 0x28,
    Dload3 = 0x29,
    Dmul = 0x6B,
    Dneg = 0x77,
    Drem = 0x73,
    Dreturn = 0xAF,
    Dstore = 0x39,
    Dstore0 = 0x47,
    Dstore1 = 0x48,
    Dstore2 = 0x49,
    Dstore3 = 0x4A,
    Dsub = 0x67,
    Dup = 0x59,
    DupX1 = 0x5A,
    DupX2 = 0x5B,
    Dup2 = 0x5C,
    Dup2X1 = 0x5D,
    Dup2X2 = 0x5E,
    F2d = 0x8D,
    F2i = 0x8B,
    F2l = 0x8C,
    Fadd = 0x62,
    Faload = 0x30,
    Fastore = 0x51,
    Fcmpg = 0x96,
    Fcmpl = 0x95,
    Fconst0 = 0x0B,
    Fconst1 = 0x0C,
    Fconst2 = 0x0D,
    Fdiv = 0x6E,
    Fload = 0x17,
    Fload0 = 0x22,
    Fload1 = 0x23,
    Fload2 = 0x24,
    Fload3 = 0x25,
    Fmul = 0x6A,
    Fneg = 0x76,
    Frem = 0x72,
    Freturn = 0xAE,
    Fstore = 0x38,
    Fstore0 = 0x43,
    Fstore1 = 0x44,
    Fstore2 = 0x45,
    Fstore3 = 0x46,
    Fsub = 0x66,
    Getfield = 0xB4,
    Getstatic = 0xB2,
    Goto = 0xA7,
    GotoW = 0xC8,
    I2b = 0x91,
    I2c = 0x92,
    I2d = 0x87,
    I2f = 0x86,
    I2l = 0x85,
    I2s = 0x93,
    Iadd = 0x60,
    Iaload = 0x2E,
    Iand = 0x7E,
    Iastore = 0x4F,
    IconstM1 = 0x02,
    Iconst0 = 0x03,
    Iconst1 = 0x04,
    Iconst2 = 0x05,
    Iconst3 = 0x06,
    Iconst4 = 0x07,
    Iconst5 = 0x08,
    Idiv = 0x6C,
    IfAcmpEq = 0xA5,
    IfAcmpNe = 0xA6,
    IfIcmpeq = 0x9F,
    IfIcmpge = 0xA2,
    IfIcmpgt = 0xA3,
    IfIcmple = 0xA4,
    IfIcmplt = 0xA1,
    IfIcmpne = 0xA0,
    IfEq = 0x99,
    IfGe = 0x9C,
    IfGt = 0x9D,
    IfLe = 0x9E,
    IfLt = 0x9B,
    IfNe = 0x9A,
    Ifnonnull = 0xC7,
    Ifnull = 0xC6,
    Iinc = 0x84,
    Iload = 0x15,
    Iload0 = 0x1A,
    Iload1 = 0x1B,
    Iload2 = 0x1C,
    Iload3 = 0x1D,
    Imul = 0x68,
    Ineg = 0x74,
    Instanceof = 0xC1,
    InvokeDynamic = 0xBA,
    InvokeInterface = 0xB9,
    InvokeSpecial = 0xB7,
    InvokeStatic = 0xB8,
    InvokeVirtual = 0xB6,
    Ior = 0x80,
    Irem = 0x70,
    Ireturn = 0xAC,
    Ishl = 0x78,
    Ishr = 0x7A,
    Istore = 0x36,
    Istore0 = 0x3B,
    Istore1 = 0x3C,
    Istore2 = 0x3D,
    Istore3 = 0x3E,
    Isub = 0x64,
    Iushr = 0x7C,
    Ixor = 0x82,
    Jsr = 0xA8,
    JsrW = 0xC9,
    L2d = 0x8A,
    L2f = 0x89,
    L2i = 0x88,
    Ladd = 0x61,
    Laload = 0x2F,
    Land = 0x7F,
    Lastore = 0x50,
    Lcmp = 0x94,
    Lconst0 = 0x09,
    Lconst1 = 0x0A,
    Ldc = 0x12,
    LdcW = 0x13,
    Ldc2W = 0x14,
    Ldiv = 0x6D,
    Lload = 0x16,
    Lload0 = 0x1E,
    Lload1 = 0x1F,
    Lload2 = 0x20,
    Lload3 = 0x21,
    Lmul = 0x69,
    Lneg = 0x75,
    Lookupswitch = 0xAB,
    Lor = 0x81,
    Lrem = 0x71,
    Lreturn = 0xAD,
    Lshl = 0x79,
    Lshr = 0x7B,
    Lstore = 0x37,
    Lstore0 = 0x3F,
    Lstore1 = 0x40,
    Lstore2 = 0x41,
    Lstore3 = 0x42,
    Lsub = 0x65,
    Lushr = 0x7D,
    Lxor = 0x83,
    Monitorenter = 0xC2,
    Monitorexit = 0xC3,
    Multianewarray = 0xC5,
    New = 0xBB,
    Newarray = 0xBC,
    Nop = 0x00,
    Pop = 0x57,
    Pop2 = 0x58,
    Putfield = 0xB5,
    Putstatic = 0xB3,
    Ret = 0xA9,
    Return = 0xB1,
    Saload = 0x35,
    Sastore = 0x56,
    Sipush = 0x11,
    Swap = 0x5F,
    TableSwitch = 0xAA,
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Instruction {
    Aaload,
    Aastore,
    AconstNull,
    Aload(u8),
    Aload0,
    Aload1,
    Aload2,
    Aload3,
    Anewarray(u16),
    Areturn,
    ArrayLength,
    Astore(u8),
    Astore0,
    Astore1,
    Astore2,
    Astore3,
    Athrow,
    Baload,
    Bastore,
    Bipush(i8),
    Breakpoint,
    Caload,
    Castore,
    Checkcast(u16),
    D2f,
    D2i,
    D2l,
    Dadd,
    Daload,
    Dastore,
    Dcmpg,
    Dcmpl,
    Dconst0,
    Dconst1,
    Ddiv,
    Dload(u8),
    Dload0,
    Dload1,
    Dload2,
    Dload3,
    Dmul,
    Dneg,
    Drem,
    Dreturn,
    Dstore(u8),
    Dstore0,
    Dstore1,
    Dstore2,
    Dstore3,
    Dsub,
    Dup,
    Dup2,
    Dup2X1,
    Dup2X2,
    DupX1,
    DupX2,
    F2d,
    F2i,
    F2l,
    Fadd,
    Faload,
    Fastore,
    Fcmpg,
    Fcmpl,
    Fconst0,
    Fconst1,
    Fconst2,
    Fdiv,
    Fload(u8),
    Fload0,
    Fload1,
    Fload2,
    Fload3,
    Fmul,
    Fneg,
    Frem,
    Freturn,
    Fstore(u8),
    Fstore0,
    Fstore1,
    Fstore2,
    Fstore3,
    Fsub,
    Getfield(u16),
    Getstatic(u16),
    Goto(i16),
    GotoW(i32),
    I2b,
    I2c,
    I2d,
    I2f,
    I2l,
    I2s,
    Iadd,
    Iaload,
    Iand,
    Iastore,
    IconstM1,
    Iconst0,
    Iconst1,
    Iconst2,
    Iconst3,
    Iconst4,
    Iconst5,
    Idiv,
    IfAcmpEq(i16),
    IfAcmpNe(i16),
    IfEq(i16),
    IfGe(i16),
    IfGt(i16),
    IfIcmpeq(i16),
    IfIcmpge(i16),
    IfIcmpgt(i16),
    IfIcmple(i16),
    IfIcmplt(i16),
    IfIcmpne(i16),
    IfLe(i16),
    IfLt(i16),
    IfNe(i16),
    Ifnonnull(i16),
    Ifnull(i16),
    Iinc(u8, i8),
    Iload(u8),
    Iload0,
    Iload1,
    Iload2,
    Iload3,
    Imul,
    Ineg,
    Lookupswitch(LookupSwitchData),
    Instanceof(u16),
    InvokeDynamic(u16),
    InvokeInterface(u16, u8),
    InvokeSpecial(u16),
    InvokeStatic(u16),
    InvokeVirtual(u16),
    Ior,
    Irem,
    Ireturn,
    Ishl,
    Ishr,
    Istore(u8),
    Istore0,
    Istore1,
    Istore2,
    Istore3,
    Isub,
    Iushr,
    Ixor,
    Jsr(i16),
    JsrW(i32),
    L2d,
    L2f,
    L2i,
    Ladd,
    Laload,
    Land,
    Lastore,
    Lcmp,
    Lconst0,
    Lconst1,
    Ldc(u16),
    Ldc2W(u16),
    LdcW(u16),
    Ldiv,
    Lload(u8),
    Lload0,
    Lload1,
    Lload2,
    Lload3,
    Lmul,
    Lneg,
    Lor,
    Lrem,
    Lreturn,
    Lshl,
    Lshr,
    Lstore(u8),
    Lstore0,
    Lstore1,
    Lstore2,
    Lstore3,
    Lsub,
    Lushr,
    Lxor,
    Monitorenter,
    Monitorexit,
    Multianewarray(u16, u8),
    New(u16),
    Newarray(ArrayType),
    Nop,
    Pop,
    Pop2,
    Putfield(u16),
    Putstatic(u16),
    Ret(u8),
    Return,
    Saload,
    Sastore,
    Sipush(i16),
    Swap,
    Impdep1,
    Impdep2,
    TableSwitch(TableSwitchData),
}

impl Instruction {
    pub fn byte_size(&self) -> u16 {
        match self {
            // Variable-size instructions
            Self::Lookupswitch(data) => {
                // opcode (1) + padding (0-3) + default (4) + npairs (4) + pairs (8 * n)
                1 + data.padding as u16 + 4 + 4 + (8 * data.pairs.len() as u16)
            }
            Self::TableSwitch(data) => {
                // opcode (1) + padding (0-3) + default (4) + low (4) + high (4) + offsets (4 * n)
                1 + data.padding as u16 + 4 + 4 + 4 + (4 * data.offsets.len() as u16)
            }
            // 5-byte instructions
            Self::GotoW(_)
            | Self::JsrW(_)
            | Self::InvokeDynamic(_)
            | Self::InvokeInterface(_, _) => 5,

            // 4-byte instructions
            Self::Multianewarray(_, _) => 4,

            // 3-byte instructions
            Self::Anewarray(_)
            | Self::Checkcast(_)
            | Self::Getfield(_)
            | Self::Getstatic(_)
            | Self::Goto(_)
            | Self::IfAcmpEq(_)
            | Self::IfAcmpNe(_)
            | Self::IfEq(_)
            | Self::IfGe(_)
            | Self::IfGt(_)
            | Self::IfLe(_)
            | Self::IfLt(_)
            | Self::IfNe(_)
            | Self::Ifnonnull(_)
            | Self::Ifnull(_)
            | Self::IfIcmpeq(_)
            | Self::IfIcmpge(_)
            | Self::IfIcmpgt(_)
            | Self::IfIcmple(_)
            | Self::IfIcmplt(_)
            | Self::IfIcmpne(_)
            | Self::Iinc(_, _)
            | Self::Instanceof(_)
            | Self::InvokeSpecial(_)
            | Self::InvokeStatic(_)
            | Self::InvokeVirtual(_)
            | Self::Ldc2W(_)
            | Self::LdcW(_)
            | Self::New(_)
            | Self::Putfield(_)
            | Self::Putstatic(_)
            | Self::Sipush(_)
            | Self::Jsr(_) => 3,

            // 2-byte instructions
            Self::Aload(_)
            | Self::Astore(_)
            | Self::Bipush(_)
            | Self::Dload(_)
            | Self::Dstore(_)
            | Self::Fload(_)
            | Self::Fstore(_)
            | Self::Iload(_)
            | Self::Istore(_)
            | Self::Ldc(_)
            | Self::Lload(_)
            | Self::Lstore(_)
            | Self::Newarray(_)
            | Self::Ret(_) => 2,

            // 1-byte instructions (everything else)
            _ => 1,
        }
    }
}

impl Instruction {
    fn switch_padding(pc: usize) -> u8 {
        ((4 - ((pc + 1) & 3)) & 3) as u8
    }

    pub fn new_at(code: &[u8], pc: usize) -> Result<Instruction, InstructionErr> {
        let mut cursor = ByteCursor::new(&code[pc..]);
        let opcode_byte = cursor.u8()?;
        let opcode = Opcode::try_from(opcode_byte)
            .map_err(|_| InstructionErr::UnsupportedOpCode(opcode_byte))?;

        let instruction = match opcode {
            Opcode::Aaload => Self::Aaload,
            Opcode::Aastore => Self::Aastore,
            Opcode::AconstNull => Self::AconstNull,
            Opcode::Aload => Self::Aload(cursor.u8()?),
            Opcode::Aload0 => Self::Aload0,
            Opcode::Aload1 => Self::Aload1,
            Opcode::Aload2 => Self::Aload2,
            Opcode::Aload3 => Self::Aload3,
            Opcode::Anewarray => Self::Anewarray(cursor.u16()?),
            Opcode::Areturn => Self::Areturn,
            Opcode::ArrayLength => Self::ArrayLength,
            Opcode::Astore => Self::Astore(cursor.u8()?),
            Opcode::Astore0 => Self::Astore0,
            Opcode::Astore1 => Self::Astore1,
            Opcode::Astore2 => Self::Astore2,
            Opcode::Astore3 => Self::Astore3,
            Opcode::Athrow => Self::Athrow,
            Opcode::Baload => Self::Baload,
            Opcode::Bastore => Self::Bastore,
            Opcode::Bipush => Self::Bipush(cursor.i8()?),
            Opcode::Breakpoint => Self::Breakpoint,
            Opcode::Caload => Self::Caload,
            Opcode::Castore => Self::Castore,
            Opcode::Checkcast => Self::Checkcast(cursor.u16()?),
            Opcode::D2f => Self::D2f,
            Opcode::D2i => Self::D2i,
            Opcode::D2l => Self::D2l,
            Opcode::Dadd => Self::Dadd,
            Opcode::Daload => Self::Daload,
            Opcode::Dastore => Self::Dastore,
            Opcode::Dcmpg => Self::Dcmpg,
            Opcode::Dcmpl => Self::Dcmpl,
            Opcode::Dconst0 => Self::Dconst0,
            Opcode::Dconst1 => Self::Dconst1,
            Opcode::Ddiv => Self::Ddiv,
            Opcode::Dload => Self::Dload(cursor.u8()?),
            Opcode::Dload0 => Self::Dload0,
            Opcode::Dload1 => Self::Dload1,
            Opcode::Dload2 => Self::Dload2,
            Opcode::Dload3 => Self::Dload3,
            Opcode::Dmul => Self::Dmul,
            Opcode::Dneg => Self::Dneg,
            Opcode::Drem => Self::Drem,
            Opcode::Dreturn => Self::Dreturn,
            Opcode::Dstore => Self::Dstore(cursor.u8()?),
            Opcode::Dstore0 => Self::Dstore0,
            Opcode::Dstore1 => Self::Dstore1,
            Opcode::Dstore2 => Self::Dstore2,
            Opcode::Dstore3 => Self::Dstore3,
            Opcode::Dsub => Self::Dsub,
            Opcode::Dup => Self::Dup,
            Opcode::Dup2 => Self::Dup2,
            Opcode::Dup2X1 => Self::Dup2X1,
            Opcode::Dup2X2 => Self::Dup2X2,
            Opcode::DupX1 => Self::DupX1,
            Opcode::DupX2 => Self::DupX2,
            Opcode::F2d => Self::F2d,
            Opcode::F2i => Self::F2i,
            Opcode::F2l => Self::F2l,
            Opcode::Fadd => Self::Fadd,
            Opcode::Faload => Self::Faload,
            Opcode::Fastore => Self::Fastore,
            Opcode::Fcmpg => Self::Fcmpg,
            Opcode::Fcmpl => Self::Fcmpl,
            Opcode::Fconst0 => Self::Fconst0,
            Opcode::Fconst1 => Self::Fconst1,
            Opcode::Fconst2 => Self::Fconst2,
            Opcode::Fdiv => Self::Fdiv,
            Opcode::Fload => Self::Fload(cursor.u8()?),
            Opcode::Fload0 => Self::Fload0,
            Opcode::Fload1 => Self::Fload1,
            Opcode::Fload2 => Self::Fload2,
            Opcode::Fload3 => Self::Fload3,
            Opcode::Fmul => Self::Fmul,
            Opcode::Fneg => Self::Fneg,
            Opcode::Frem => Self::Frem,
            Opcode::Freturn => Self::Freturn,
            Opcode::Fstore => Self::Fstore(cursor.u8()?),
            Opcode::Fstore0 => Self::Fstore0,
            Opcode::Fstore1 => Self::Fstore1,
            Opcode::Fstore2 => Self::Fstore2,
            Opcode::Fstore3 => Self::Fstore3,
            Opcode::Fsub => Self::Fsub,
            Opcode::Getfield => Self::Getfield(cursor.u16()?),
            Opcode::Getstatic => Self::Getstatic(cursor.u16()?),
            Opcode::Goto => Self::Goto(cursor.i16()?),
            Opcode::GotoW => Self::GotoW(cursor.i32()?),
            Opcode::I2b => Self::I2b,
            Opcode::I2c => Self::I2c,
            Opcode::I2d => Self::I2d,
            Opcode::I2f => Self::I2f,
            Opcode::I2l => Self::I2l,
            Opcode::I2s => Self::I2s,
            Opcode::Iadd => Self::Iadd,
            Opcode::Iaload => Self::Iaload,
            Opcode::Iand => Self::Iand,
            Opcode::Iastore => Self::Iastore,
            Opcode::IconstM1 => Self::IconstM1,
            Opcode::Iconst0 => Self::Iconst0,
            Opcode::Iconst1 => Self::Iconst1,
            Opcode::Iconst2 => Self::Iconst2,
            Opcode::Iconst3 => Self::Iconst3,
            Opcode::Iconst4 => Self::Iconst4,
            Opcode::Iconst5 => Self::Iconst5,
            Opcode::Idiv => Self::Idiv,
            Opcode::IfAcmpEq => Self::IfAcmpEq(cursor.i16()?),
            Opcode::IfAcmpNe => Self::IfAcmpNe(cursor.i16()?),
            Opcode::IfEq => Self::IfEq(cursor.i16()?),
            Opcode::IfGe => Self::IfGe(cursor.i16()?),
            Opcode::IfGt => Self::IfGt(cursor.i16()?),
            Opcode::IfLe => Self::IfLe(cursor.i16()?),
            Opcode::IfLt => Self::IfLt(cursor.i16()?),
            Opcode::IfNe => Self::IfNe(cursor.i16()?),
            Opcode::Ifnonnull => Self::Ifnonnull(cursor.i16()?),
            Opcode::Ifnull => Self::Ifnull(cursor.i16()?),
            Opcode::IfIcmpeq => Self::IfIcmpeq(cursor.i16()?),
            Opcode::IfIcmpge => Self::IfIcmpge(cursor.i16()?),
            Opcode::IfIcmpgt => Self::IfIcmpgt(cursor.i16()?),
            Opcode::IfIcmple => Self::IfIcmple(cursor.i16()?),
            Opcode::IfIcmplt => Self::IfIcmplt(cursor.i16()?),
            Opcode::IfIcmpne => Self::IfIcmpne(cursor.i16()?),
            Opcode::Iinc => Self::Iinc(cursor.u8()?, cursor.i8()?),
            Opcode::Iload => Self::Iload(cursor.u8()?),
            Opcode::Iload0 => Self::Iload0,
            Opcode::Iload1 => Self::Iload1,
            Opcode::Iload2 => Self::Iload2,
            Opcode::Iload3 => Self::Iload3,
            Opcode::Imul => Self::Imul,
            Opcode::Ineg => Self::Ineg,
            Opcode::Instanceof => Self::Instanceof(cursor.u16()?),
            Opcode::InvokeDynamic => {
                let index = cursor.u16()?;
                let _zero = cursor.u16()?; //TODO assert?
                Self::InvokeDynamic(index)
            }
            Opcode::InvokeInterface => {
                let index = cursor.u16()?;
                let count = cursor.u8()?;
                let _zero = cursor.u8()?; //TODO assert?
                Self::InvokeInterface(index, count)
            }
            Opcode::InvokeSpecial => Self::InvokeSpecial(cursor.u16()?),
            Opcode::InvokeStatic => Self::InvokeStatic(cursor.u16()?),
            Opcode::InvokeVirtual => Self::InvokeVirtual(cursor.u16()?),
            Opcode::Ior => Self::Ior,
            Opcode::Irem => Self::Irem,
            Opcode::Ireturn => Self::Ireturn,
            Opcode::Ishl => Self::Ishl,
            Opcode::Ishr => Self::Ishr,
            Opcode::Istore => Self::Istore(cursor.u8()?),
            Opcode::Istore0 => Self::Istore0,
            Opcode::Istore1 => Self::Istore1,
            Opcode::Istore2 => Self::Istore2,
            Opcode::Istore3 => Self::Istore3,
            Opcode::Isub => Self::Isub,
            Opcode::Iushr => Self::Iushr,
            Opcode::Ixor => Self::Ixor,
            Opcode::Jsr => Self::Jsr(cursor.i16()?),
            Opcode::JsrW => Self::JsrW(cursor.i32()?),
            Opcode::L2d => Self::L2d,
            Opcode::L2f => Self::L2f,
            Opcode::L2i => Self::L2i,
            Opcode::Ladd => Self::Ladd,
            Opcode::Laload => Self::Laload,
            Opcode::Land => Self::Land,
            Opcode::Lastore => Self::Lastore,
            Opcode::Lcmp => Self::Lcmp,
            Opcode::Lconst0 => Self::Lconst0,
            Opcode::Lconst1 => Self::Lconst1,
            Opcode::Ldc => Self::Ldc(cursor.u8()? as u16),
            Opcode::Ldc2W => Self::Ldc2W(cursor.u16()?),
            Opcode::LdcW => Self::LdcW(cursor.u16()?),
            Opcode::Ldiv => Self::Ldiv,
            Opcode::Lload => Self::Lload(cursor.u8()?),
            Opcode::Lload0 => Self::Lload0,
            Opcode::Lload1 => Self::Lload1,
            Opcode::Lload2 => Self::Lload2,
            Opcode::Lload3 => Self::Lload3,
            Opcode::Lmul => Self::Lmul,
            Opcode::Lneg => Self::Lneg,
            Opcode::Lookupswitch => {
                let padding = Self::switch_padding(pc);
                for _ in 0..padding {
                    cursor.u8()?;
                }

                let default_offset = cursor.i32()?;
                let npairs = cursor.i32()?;
                let mut pairs = Vec::with_capacity(npairs as usize);
                for _ in 0..npairs {
                    let match_value = cursor.i32()?;
                    let offset = cursor.i32()?;
                    pairs.push((match_value, offset));
                }
                Instruction::Lookupswitch(LookupSwitchData {
                    padding,
                    default_offset,
                    pairs,
                })
            }
            Opcode::Lor => Self::Lor,
            Opcode::Lrem => Self::Lrem,
            Opcode::Lreturn => Self::Lreturn,
            Opcode::Lshl => Self::Lshl,
            Opcode::Lshr => Self::Lshr,
            Opcode::Lstore => Self::Lstore(cursor.u8()?),
            Opcode::Lstore0 => Self::Lstore0,
            Opcode::Lstore1 => Self::Lstore1,
            Opcode::Lstore2 => Self::Lstore2,
            Opcode::Lstore3 => Self::Lstore3,
            Opcode::Lsub => Self::Lsub,
            Opcode::Lushr => Self::Lushr,
            Opcode::Lxor => Self::Lxor,
            Opcode::Monitorenter => Self::Monitorenter,
            Opcode::Monitorexit => Self::Monitorexit,
            Opcode::Multianewarray => Self::Multianewarray(cursor.u16()?, cursor.u8()?),
            Opcode::New => Self::New(cursor.u16()?),
            Opcode::Newarray => {
                let array_type_raw = cursor.u8()?;
                let array_type = ArrayType::try_from_primitive(array_type_raw)
                    .map_err(|_| InstructionErr::UnknownArrayType(array_type_raw))?;
                Self::Newarray(array_type)
            }
            Opcode::Nop => Self::Nop,
            Opcode::Pop => Self::Pop,
            Opcode::Pop2 => Self::Pop2,
            Opcode::Putfield => Self::Putfield(cursor.u16()?),
            Opcode::Putstatic => Self::Putstatic(cursor.u16()?),
            Opcode::Ret => Self::Ret(cursor.u8()?),
            Opcode::Return => Self::Return,
            Opcode::Saload => Self::Saload,
            Opcode::Sastore => Self::Sastore,
            Opcode::Sipush => Self::Sipush(cursor.i16()?),
            Opcode::Swap => Self::Swap,
            Opcode::TableSwitch => {
                let padding = Self::switch_padding(pc);
                for _ in 0..padding {
                    cursor.u8()?;
                }

                let default_offset = cursor.i32()?;
                let low = cursor.i32()?;
                let high = cursor.i32()?;
                let num_offsets = (high - low + 1) as usize;
                let mut offsets = Vec::with_capacity(num_offsets);
                for _ in 0..num_offsets {
                    offsets.push(cursor.i32()?);
                }
                Instruction::TableSwitch(TableSwitchData {
                    padding,
                    default_offset,
                    low,
                    high,
                    offsets,
                })
            }
        };

        Ok(instruction)
    }

    pub fn get_name(&self) -> &'static str {
        match self {
            Self::Aaload => "aaload",
            Self::Aastore => "aastore",
            Self::AconstNull => "aconst_null",
            Self::Aload(_) => "aload",
            Self::Aload0 => "aload_0",
            Self::Aload1 => "aload_1",
            Self::Aload2 => "aload_2",
            Self::Aload3 => "aload_3",
            Self::Anewarray(_) => "anewarray",
            Self::Areturn => "areturn",
            Self::ArrayLength => "arraylength",
            Self::Astore(_) => "astore",
            Self::Astore0 => "astore_0",
            Self::Astore1 => "astore_1",
            Self::Astore2 => "astore_2",
            Self::Astore3 => "astore_3",
            Self::Athrow => "athrow",
            Self::Baload => "baload",
            Self::Bastore => "bastore",
            Self::Bipush(_) => "bipush",
            Self::Breakpoint => "breakpoint",
            Self::Caload => "caload",
            Self::Castore => "castore",
            Self::Checkcast(_) => "checkcast",
            Self::D2f => "d2f",
            Self::D2i => "d2i",
            Self::D2l => "d2l",
            Self::Dadd => "dadd",
            Self::Daload => "daload",
            Self::Dastore => "dastore",
            Self::Dcmpg => "dcmpg",
            Self::Dcmpl => "dcmpl",
            Self::Dconst0 => "dconst_0",
            Self::Dconst1 => "dconst_1",
            Self::Ddiv => "ddiv",
            Self::Dload(_) => "dload",
            Self::Dload0 => "dload_0",
            Self::Dload1 => "dload_1",
            Self::Dload2 => "dload_2",
            Self::Dload3 => "dload_3",
            Self::Dmul => "dmul",
            Self::Dneg => "dneg",
            Self::Drem => "drem",
            Self::Dreturn => "dreturn",
            Self::Dstore(_) => "dstore",
            Self::Dstore0 => "dstore_0",
            Self::Dstore1 => "dstore_1",
            Self::Dstore2 => "dstore_2",
            Self::Dstore3 => "dstore_3",
            Self::Dsub => "dsub",
            Self::Dup => "dup",
            Self::Dup2 => "dup2",
            Self::Dup2X1 => "dup2_x1",
            Self::Dup2X2 => "dup2_x2",
            Self::DupX1 => "dup_x1",
            Self::DupX2 => "dup_x2",
            Self::F2d => "f2d",
            Self::F2i => "f2i",
            Self::F2l => "f2l",
            Self::Fadd => "fadd",
            Self::Faload => "faload",
            Self::Fastore => "fastore",
            Self::Fcmpg => "fcmpg",
            Self::Fcmpl => "fcmpl",
            Self::Fconst0 => "fconst_0",
            Self::Fconst1 => "fconst_1",
            Self::Fconst2 => "fconst_2",
            Self::Fdiv => "fdiv",
            Self::Fload(_) => "fload",
            Self::Fload0 => "fload_0",
            Self::Fload1 => "fload_1",
            Self::Fload2 => "fload_2",
            Self::Fload3 => "fload_3",
            Self::Fmul => "fmul",
            Self::Fneg => "fneg",
            Self::Frem => "frem",
            Self::Freturn => "freturn",
            Self::Fstore(_) => "fstore",
            Self::Fstore0 => "fstore_0",
            Self::Fstore1 => "fstore_1",
            Self::Fstore2 => "fstore_2",
            Self::Fstore3 => "fstore_3",
            Self::Fsub => "fsub",
            Self::Getfield(_) => "getfield",
            Self::Getstatic(_) => "getstatic",
            Self::Goto(_) => "goto",
            Self::GotoW(_) => "goto_w",
            Self::I2b => "i2b",
            Self::I2c => "i2c",
            Self::I2d => "i2d",
            Self::I2f => "i2f",
            Self::I2l => "i2l",
            Self::I2s => "i2s",
            Self::Iadd => "iadd",
            Self::Iaload => "iaload",
            Self::Iand => "iand",
            Self::Iastore => "iastore",
            Self::IconstM1 => "iconst_m1",
            Self::Iconst0 => "iconst_0",
            Self::Iconst1 => "iconst_1",
            Self::Iconst2 => "iconst_2",
            Self::Iconst3 => "iconst_3",
            Self::Iconst4 => "iconst_4",
            Self::Iconst5 => "iconst_5",
            Self::Idiv => "idiv",
            Self::IfAcmpEq(_) => "if_acmpeq",
            Self::IfAcmpNe(_) => "if_acmpne",
            Self::IfEq(_) => "ifeq",
            Self::IfGe(_) => "ifge",
            Self::IfGt(_) => "ifgt",
            Self::IfLe(_) => "ifle",
            Self::IfLt(_) => "iflt",
            Self::IfNe(_) => "ifne",
            Self::Ifnonnull(_) => "ifnonnull",
            Self::Ifnull(_) => "ifnull",
            Self::IfIcmpeq(_) => "if_icmpeq",
            Self::IfIcmpge(_) => "if_icmpge",
            Self::IfIcmpgt(_) => "if_icmpgt",
            Self::IfIcmple(_) => "if_icmple",
            Self::IfIcmplt(_) => "if_icmplt",
            Self::IfIcmpne(_) => "if_icmpne",
            Self::Iinc(_, _) => "iinc",
            Self::Iload(_) => "iload",
            Self::Iload0 => "iload_0",
            Self::Iload1 => "iload_1",
            Self::Iload2 => "iload_2",
            Self::Iload3 => "iload_3",
            Self::Imul => "imul",
            Self::Ineg => "ineg",
            Self::Instanceof(_) => "instanceof",
            Self::InvokeDynamic(_) => "invokedynamic",
            Self::InvokeInterface(_, _) => "invokeinterface",
            Self::InvokeSpecial(_) => "invokespecial",
            Self::InvokeStatic(_) => "invokestatic",
            Self::InvokeVirtual(_) => "invokevirtual",
            Self::Ior => "ior",
            Self::Irem => "irem",
            Self::Ireturn => "ireturn",
            Self::Ishl => "ishl",
            Self::Ishr => "ishr",
            Self::Istore(_) => "istore",
            Self::Istore0 => "istore_0",
            Self::Istore1 => "istore_1",
            Self::Istore2 => "istore_2",
            Self::Istore3 => "istore_3",
            Self::Isub => "isub",
            Self::Iushr => "iushr",
            Self::Ixor => "ixor",
            Self::Jsr(_) => "jsr",
            Self::JsrW(_) => "jsr_w",
            Self::L2d => "l2d",
            Self::L2f => "l2f",
            Self::L2i => "l2i",
            Self::Ladd => "ladd",
            Self::Laload => "laload",
            Self::Land => "land",
            Self::Lastore => "lastore",
            Self::Lcmp => "lcmp",
            Self::Lconst0 => "lconst_0",
            Self::Lconst1 => "lconst_1",
            Self::Ldc(_) => "ldc",
            Self::Ldc2W(_) => "ldc2_w",
            Self::LdcW(_) => "ldc_w",
            Self::Ldiv => "ldiv",
            Self::Lload(_) => "lload",
            Self::Lload0 => "lload_0",
            Self::Lload1 => "lload_1",
            Self::Lload2 => "lload_2",
            Self::Lload3 => "lload_3",
            Self::Lmul => "lmul",
            Self::Lneg => "lneg",
            Self::Lookupswitch(_) => "lookupswitch",
            Self::Lor => "lor",
            Self::Lrem => "lrem",
            Self::Lreturn => "lreturn",
            Self::Lshl => "lshl",
            Self::Lshr => "lshr",
            Self::Lstore(_) => "lstore",
            Self::Lstore0 => "lstore_0",
            Self::Lstore1 => "lstore_1",
            Self::Lstore2 => "lstore_2",
            Self::Lstore3 => "lstore_3",
            Self::Lsub => "lsub",
            Self::Lushr => "lushr",
            Self::Lxor => "lxor",
            Self::Monitorenter => "monitorenter",
            Self::Monitorexit => "monitorexit",
            Self::Multianewarray(_, _) => "multianewarray",
            Self::New(_) => "new",
            Self::Newarray(_) => "newarray",
            Self::Nop => "nop",
            Self::Pop => "pop",
            Self::Pop2 => "pop2",
            Self::Putfield(_) => "putfield",
            Self::Putstatic(_) => "putstatic",
            Self::Ret(_) => "ret",
            Self::Return => "return",
            Self::Saload => "saload",
            Self::Sastore => "sastore",
            Self::Sipush(_) => "sipush",
            Self::Swap => "swap",
            Self::Impdep1 => "impdep1",
            Self::Impdep2 => "impdep2",
            Self::TableSwitch(_) => "tableswitch",
        }
    }
}

impl std::fmt::Display for ArrayType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match self {
                ArrayType::Boolean => "boolean",
                ArrayType::Char => "char",
                ArrayType::Float => "float",
                ArrayType::Double => "double",
                ArrayType::Byte => "byte",
                ArrayType::Short => "short",
                ArrayType::Int => "int",
                ArrayType::Long => "long",
            }
        )
    }
}
